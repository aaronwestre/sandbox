
/Users/aaron/Desktop/synthings_basic_input/target/1.4.2/photon/synthings_basic_input.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002cd0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2cf0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000084  20000000  080a2cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000002b0  20000084  20000084  00030084  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a2d78  080a2d78  00022d78  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2da0  080a2da0  00022da0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000a3358  00000000  00000000  00022da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ee4d  00000000  00000000  000c60fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000128dc  00000000  00000000  000d4f49  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001e20  00000000  00000000  000e7825  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003078  00000000  00000000  000e9645  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024297  00000000  00000000  000ec6bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002155b  00000000  00000000  00110954  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a4eef  00000000  00000000  00131eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b604  00000000  00000000  001d6da0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f002 fbe1 	bl	80a27f8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f002 fbe6 	bl	80a280e <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a2cf4 	.word	0x080a2cf4
 80a0050:	20000084 	.word	0x20000084
 80a0054:	20000084 	.word	0x20000084
 80a0058:	20000334 	.word	0x20000334
 80a005c:	20000334 	.word	0x20000334

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f001 fb37 	bl	80a16d4 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a2cb4 	.word	0x080a2cb4
 80a0088:	080a2ce8 	.word	0x080a2ce8

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b834 	b.w	80a00f8 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 f919 	bl	80a02c8 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f001 badd 	b.w	80a1658 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f000 bb67 	b.w	80a0770 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f000 bb6d 	b.w	80a0780 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <__tcf_1>:
float analogValues[6] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
String analogEventNames[6] = {"synthings_input_analog_0", "synthings_input_analog_1", "synthings_input_analog_2", "synthings_input_analog_3", "synthings_input_analog_4", "synthings_input_analog_5"};
float analogReading = 0.0f;
uint16_t digitalPins[6] = {D0, D1, D2, D3, D4, D5};
int digitalValues[6] = {LOW, LOW, LOW, LOW, LOW, LOW};
String digitalEventNames[6] = {"synthings_input_digital_0", "synthings_input_digital_1", "synthings_input_digital_2", "synthings_input_digital_3", "synthings_input_digital_4", "synthings_input_digital_5"};
 80a00b8:	b538      	push	{r3, r4, r5, lr}
 80a00ba:	4d06      	ldr	r5, [pc, #24]	; (80a00d4 <__tcf_1+0x1c>)
 80a00bc:	2400      	movs	r4, #0
 80a00be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80a00c2:	4428      	add	r0, r5
 80a00c4:	3c10      	subs	r4, #16
 80a00c6:	f001 f84e 	bl	80a1166 <_ZN6StringD1Ev>
 80a00ca:	f114 0f60 	cmn.w	r4, #96	; 0x60
 80a00ce:	d1f6      	bne.n	80a00be <__tcf_1+0x6>
 80a00d0:	bd38      	pop	{r3, r4, r5, pc}
 80a00d2:	bf00      	nop
 80a00d4:	20000140 	.word	0x20000140

080a00d8 <__tcf_0>:
String pingEventName = "ping";
float analogThreshold = 0.05f;
float analogDifference;
uint16_t analogPins[6] = {A0, A1, A2, A3, A4, A5};
float analogValues[6] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
String analogEventNames[6] = {"synthings_input_analog_0", "synthings_input_analog_1", "synthings_input_analog_2", "synthings_input_analog_3", "synthings_input_analog_4", "synthings_input_analog_5"};
 80a00d8:	b538      	push	{r3, r4, r5, lr}
 80a00da:	4d06      	ldr	r5, [pc, #24]	; (80a00f4 <__tcf_0+0x1c>)
 80a00dc:	2400      	movs	r4, #0
 80a00de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80a00e2:	4428      	add	r0, r5
 80a00e4:	3c10      	subs	r4, #16
 80a00e6:	f001 f83e 	bl	80a1166 <_ZN6StringD1Ev>
 80a00ea:	f114 0f60 	cmn.w	r4, #96	; 0x60
 80a00ee:	d1f6      	bne.n	80a00de <__tcf_0+0x6>
 80a00f0:	bd38      	pop	{r3, r4, r5, pc}
 80a00f2:	bf00      	nop
 80a00f4:	20000090 	.word	0x20000090

080a00f8 <setup>:
int digitalReading = LOW;
String publishedValueLow = "Off";
String publishedValueHigh = "On";

void setup() 
{
 80a00f8:	b538      	push	{r3, r4, r5, lr}
    for (int index = 0; index < arraySize(analogPins); index++) 
    { 
        pinMode(analogPins[index], INPUT);
 80a00fa:	4d0a      	ldr	r5, [pc, #40]	; (80a0124 <setup+0x2c>)
String publishedValueLow = "Off";
String publishedValueHigh = "On";

void setup() 
{
    for (int index = 0; index < arraySize(analogPins); index++) 
 80a00fc:	2400      	movs	r4, #0
    { 
        pinMode(analogPins[index], INPUT);
 80a00fe:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
 80a0102:	2100      	movs	r1, #0
String publishedValueLow = "Off";
String publishedValueHigh = "On";

void setup() 
{
    for (int index = 0; index < arraySize(analogPins); index++) 
 80a0104:	3401      	adds	r4, #1
    { 
        pinMode(analogPins[index], INPUT);
 80a0106:	f001 fb35 	bl	80a1774 <pinMode>
String publishedValueLow = "Off";
String publishedValueHigh = "On";

void setup() 
{
    for (int index = 0; index < arraySize(analogPins); index++) 
 80a010a:	2c06      	cmp	r4, #6
 80a010c:	d1f7      	bne.n	80a00fe <setup+0x6>
    { 
        pinMode(analogPins[index], INPUT);
    }
    for (int index = 0; index < arraySize(digitalPins); index++) 
    { 
        pinMode(digitalPins[index], INPUT_PULLDOWN);
 80a010e:	4d06      	ldr	r5, [pc, #24]	; (80a0128 <setup+0x30>)
 80a0110:	2400      	movs	r4, #0
 80a0112:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
 80a0116:	2103      	movs	r1, #3
{
    for (int index = 0; index < arraySize(analogPins); index++) 
    { 
        pinMode(analogPins[index], INPUT);
    }
    for (int index = 0; index < arraySize(digitalPins); index++) 
 80a0118:	3401      	adds	r4, #1
    { 
        pinMode(digitalPins[index], INPUT_PULLDOWN);
 80a011a:	f001 fb2b 	bl	80a1774 <pinMode>
{
    for (int index = 0; index < arraySize(analogPins); index++) 
    { 
        pinMode(analogPins[index], INPUT);
    }
    for (int index = 0; index < arraySize(digitalPins); index++) 
 80a011e:	2c06      	cmp	r4, #6
 80a0120:	d1f7      	bne.n	80a0112 <setup+0x1a>
    { 
        pinMode(digitalPins[index], INPUT_PULLDOWN);
    }
}
 80a0122:	bd38      	pop	{r3, r4, r5, pc}
 80a0124:	20000010 	.word	0x20000010
 80a0128:	20000004 	.word	0x20000004

080a012c <_Z21withinAnalogToleranceff>:
    }
    delay(1000);
}

bool withinAnalogTolerance(float reading, float previousReading) 
{
 80a012c:	b510      	push	{r4, lr}
    analogDifference = reading - previousReading;
 80a012e:	f002 f9af 	bl	80a2490 <__aeabi_fsub>
 80a0132:	4b09      	ldr	r3, [pc, #36]	; (80a0158 <_Z21withinAnalogToleranceff+0x2c>)
 80a0134:	f04f 0401 	mov.w	r4, #1
 80a0138:	6018      	str	r0, [r3, #0]
 80a013a:	f002 fb29 	bl	80a2790 <__aeabi_f2iz>
 80a013e:	2800      	cmp	r0, #0
 80a0140:	bfb8      	it	lt
 80a0142:	4240      	neglt	r0, r0
 80a0144:	f002 fa5a 	bl	80a25fc <__aeabi_i2f>
 80a0148:	4b04      	ldr	r3, [pc, #16]	; (80a015c <_Z21withinAnalogToleranceff+0x30>)
 80a014a:	6819      	ldr	r1, [r3, #0]
 80a014c:	f002 faf8 	bl	80a2740 <__aeabi_fcmplt>
 80a0150:	b900      	cbnz	r0, 80a0154 <_Z21withinAnalogToleranceff+0x28>
 80a0152:	4604      	mov	r4, r0
    if (abs(analogDifference) < analogThreshold) 
    {
        return true;
    }
    return false;
}
 80a0154:	b2e0      	uxtb	r0, r4
 80a0156:	bd10      	pop	{r4, pc}
 80a0158:	20000088 	.word	0x20000088
 80a015c:	20000000 	.word	0x20000000

080a0160 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0160:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0162:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0164:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a0166:	b17c      	cbz	r4, 80a0188 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0168:	6863      	ldr	r3, [r4, #4]
 80a016a:	3b01      	subs	r3, #1
 80a016c:	6063      	str	r3, [r4, #4]
 80a016e:	b95b      	cbnz	r3, 80a0188 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a0170:	6823      	ldr	r3, [r4, #0]
 80a0172:	4620      	mov	r0, r4
 80a0174:	689b      	ldr	r3, [r3, #8]
 80a0176:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0178:	68a3      	ldr	r3, [r4, #8]
 80a017a:	3b01      	subs	r3, #1
 80a017c:	60a3      	str	r3, [r4, #8]
 80a017e:	b91b      	cbnz	r3, 80a0188 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0180:	6823      	ldr	r3, [r4, #0]
 80a0182:	4620      	mov	r0, r4
 80a0184:	68db      	ldr	r3, [r3, #12]
 80a0186:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a0188:	4628      	mov	r0, r5
 80a018a:	bd38      	pop	{r3, r4, r5, pc}
 80a018c:	0000      	movs	r0, r0
	...

080a0190 <_Z26readAnalogInputsAndPublishv>:

void readAnalogInputsAndPublish()
{
 80a0190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    for (int index = 0; index < arraySize(analogPins); index++) 
    { 
        analogReading = (float)analogRead(analogPins[index]);
        analogReading = map(analogReading, 0.0, 4095.0, 0.0, 1.0);
 80a0194:	f20f 0998 	addw	r9, pc, #152	; 0x98
 80a0198:	e9d9 8900 	ldrd	r8, r9, [r9]
 80a019c:	4f26      	ldr	r7, [pc, #152]	; (80a0238 <_Z26readAnalogInputsAndPublishv+0xa8>)
    }
    return false;
}

void readAnalogInputsAndPublish()
{
 80a019e:	b08c      	sub	sp, #48	; 0x30
 80a01a0:	2400      	movs	r4, #0
    for (int index = 0; index < arraySize(analogPins); index++) 
    { 
        analogReading = (float)analogRead(analogPins[index]);
        analogReading = map(analogReading, 0.0, 4095.0, 0.0, 1.0);
 80a01a2:	2600      	movs	r6, #0

void readAnalogInputsAndPublish()
{
    for (int index = 0; index < arraySize(analogPins); index++) 
    { 
        analogReading = (float)analogRead(analogPins[index]);
 80a01a4:	4b25      	ldr	r3, [pc, #148]	; (80a023c <_Z26readAnalogInputsAndPublishv+0xac>)
 80a01a6:	4d26      	ldr	r5, [pc, #152]	; (80a0240 <_Z26readAnalogInputsAndPublishv+0xb0>)
 80a01a8:	5b18      	ldrh	r0, [r3, r4]
 80a01aa:	f001 fb07 	bl	80a17bc <analogRead>
 80a01ae:	f002 fa25 	bl	80a25fc <__aeabi_i2f>
 80a01b2:	6028      	str	r0, [r5, #0]
        analogReading = map(analogReading, 0.0, 4095.0, 0.0, 1.0);
 80a01b4:	f001 fe2a 	bl	80a1e0c <__aeabi_f2d>
 80a01b8:	2200      	movs	r2, #0
 80a01ba:	2300      	movs	r3, #0
 80a01bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a01c0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a01c4:	e9cd 8900 	strd	r8, r9, [sp]
 80a01c8:	f000 fb02 	bl	80a07d0 <_Z3mapddddd>
 80a01cc:	f002 f90c 	bl	80a23e8 <__aeabi_d2f>
        if (!withinAnalogTolerance(analogReading, analogValues[index])) 
 80a01d0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80a0250 <_Z26readAnalogInputsAndPublishv+0xc0>
void readAnalogInputsAndPublish()
{
    for (int index = 0; index < arraySize(analogPins); index++) 
    { 
        analogReading = (float)analogRead(analogPins[index]);
        analogReading = map(analogReading, 0.0, 4095.0, 0.0, 1.0);
 80a01d4:	6028      	str	r0, [r5, #0]
        if (!withinAnalogTolerance(analogReading, analogValues[index])) 
 80a01d6:	f85a 1014 	ldr.w	r1, [sl, r4, lsl #1]
 80a01da:	f7ff ffa7 	bl	80a012c <_Z21withinAnalogToleranceff>
 80a01de:	b9f8      	cbnz	r0, 80a0220 <_Z26readAnalogInputsAndPublishv+0x90>
        {
            analogValues[index] = analogReading;
 80a01e0:	6828      	ldr	r0, [r5, #0]
 80a01e2:	4b18      	ldr	r3, [pc, #96]	; (80a0244 <_Z26readAnalogInputsAndPublishv+0xb4>)
 80a01e4:	f84a 0014 	str.w	r0, [sl, r4, lsl #1]
 80a01e8:	f853 a034 	ldr.w	sl, [r3, r4, lsl #3]
            Particle.publish(analogEventNames[index], String::format("%.2f", analogValues[index]), 10, PRIVATE);
 80a01ec:	f001 fe0e 	bl	80a1e0c <__aeabi_f2d>
 80a01f0:	4602      	mov	r2, r0
 80a01f2:	460b      	mov	r3, r1
 80a01f4:	a808      	add	r0, sp, #32
 80a01f6:	4914      	ldr	r1, [pc, #80]	; (80a0248 <_Z26readAnalogInputsAndPublishv+0xb8>)
 80a01f8:	f001 f810 	bl	80a121c <_ZN6String6formatEPKcz>
 80a01fc:	4b13      	ldr	r3, [pc, #76]	; (80a024c <_Z26readAnalogInputsAndPublishv+0xbc>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a01fe:	9a08      	ldr	r2, [sp, #32]
 80a0200:	781b      	ldrb	r3, [r3, #0]
 80a0202:	4651      	mov	r1, sl
 80a0204:	f88d 3000 	strb.w	r3, [sp]
 80a0208:	a806      	add	r0, sp, #24
 80a020a:	230a      	movs	r3, #10
 80a020c:	f000 fc8c 	bl	80a0b28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0210:	a807      	add	r0, sp, #28
 80a0212:	f7ff ffa5 	bl	80a0160 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0216:	a808      	add	r0, sp, #32
 80a0218:	f000 ffa5 	bl	80a1166 <_ZN6StringD1Ev>
            analogReading = 0;
 80a021c:	2300      	movs	r3, #0
 80a021e:	602b      	str	r3, [r5, #0]
 80a0220:	3402      	adds	r4, #2
    return false;
}

void readAnalogInputsAndPublish()
{
    for (int index = 0; index < arraySize(analogPins); index++) 
 80a0222:	2c0c      	cmp	r4, #12
 80a0224:	d1be      	bne.n	80a01a4 <_Z26readAnalogInputsAndPublishv+0x14>
            analogValues[index] = analogReading;
            Particle.publish(analogEventNames[index], String::format("%.2f", analogValues[index]), 10, PRIVATE);
            analogReading = 0;
        }
    }
}
 80a0226:	b00c      	add	sp, #48	; 0x30
 80a0228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a022c:	f3af 8000 	nop.w
 80a0230:	00000000 	.word	0x00000000
 80a0234:	40affe00 	.word	0x40affe00
 80a0238:	3ff00000 	.word	0x3ff00000
 80a023c:	20000010 	.word	0x20000010
 80a0240:	2000008c 	.word	0x2000008c
 80a0244:	20000090 	.word	0x20000090
 80a0248:	080a28cc 	.word	0x080a28cc
 80a024c:	200000f0 	.word	0x200000f0
 80a0250:	200000f4 	.word	0x200000f4

080a0254 <_Z27readDigitalInputsAndPublishv>:

void readDigitalInputsAndPublish()
{
 80a0254:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (int index = 0; index < arraySize(digitalPins); index++) 
    { 
        digitalReading = digitalRead(digitalPins[index]);
 80a0256:	4d15      	ldr	r5, [pc, #84]	; (80a02ac <_Z27readDigitalInputsAndPublishv+0x58>)
 80a0258:	4f15      	ldr	r7, [pc, #84]	; (80a02b0 <_Z27readDigitalInputsAndPublishv+0x5c>)
 80a025a:	462e      	mov	r6, r5
        }
    }
}

void readDigitalInputsAndPublish()
{
 80a025c:	b085      	sub	sp, #20
 80a025e:	2400      	movs	r4, #0
    for (int index = 0; index < arraySize(digitalPins); index++) 
    { 
        digitalReading = digitalRead(digitalPins[index]);
 80a0260:	5b38      	ldrh	r0, [r7, r4]
 80a0262:	f001 fa98 	bl	80a1796 <digitalRead>
        if (digitalReading != digitalValues[index])
 80a0266:	4b13      	ldr	r3, [pc, #76]	; (80a02b4 <_Z27readDigitalInputsAndPublishv+0x60>)

void readDigitalInputsAndPublish()
{
    for (int index = 0; index < arraySize(digitalPins); index++) 
    { 
        digitalReading = digitalRead(digitalPins[index]);
 80a0268:	6028      	str	r0, [r5, #0]
        if (digitalReading != digitalValues[index])
 80a026a:	f853 2014 	ldr.w	r2, [r3, r4, lsl #1]
 80a026e:	4290      	cmp	r0, r2
 80a0270:	d014      	beq.n	80a029c <_Z27readDigitalInputsAndPublishv+0x48>
        {
            digitalValues[index] = digitalReading;
 80a0272:	f843 0014 	str.w	r0, [r3, r4, lsl #1]
 80a0276:	4a10      	ldr	r2, [pc, #64]	; (80a02b8 <_Z27readDigitalInputsAndPublishv+0x64>)
 80a0278:	4b10      	ldr	r3, [pc, #64]	; (80a02bc <_Z27readDigitalInputsAndPublishv+0x68>)
            if (digitalValues[index] == HIGH)
 80a027a:	2801      	cmp	r0, #1
 80a027c:	f852 1034 	ldr.w	r1, [r2, r4, lsl #3]
 80a0280:	781b      	ldrb	r3, [r3, #0]
 80a0282:	bf0c      	ite	eq
 80a0284:	4a0e      	ldreq	r2, [pc, #56]	; (80a02c0 <_Z27readDigitalInputsAndPublishv+0x6c>)
 80a0286:	4a0f      	ldrne	r2, [pc, #60]	; (80a02c4 <_Z27readDigitalInputsAndPublishv+0x70>)
 80a0288:	a802      	add	r0, sp, #8
 80a028a:	6812      	ldr	r2, [r2, #0]
 80a028c:	f88d 3000 	strb.w	r3, [sp]
 80a0290:	230a      	movs	r3, #10
 80a0292:	f000 fc49 	bl	80a0b28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0296:	a803      	add	r0, sp, #12
 80a0298:	f7ff ff62 	bl	80a0160 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a029c:	3402      	adds	r4, #2
                Particle.publish(digitalEventNames[index], publishedValueHigh, 10, PRIVATE);
            } else {
                Particle.publish(digitalEventNames[index], publishedValueLow, 10, PRIVATE);
            }
        }
        digitalReading = LOW;
 80a029e:	2300      	movs	r3, #0
    }
}

void readDigitalInputsAndPublish()
{
    for (int index = 0; index < arraySize(digitalPins); index++) 
 80a02a0:	2c0c      	cmp	r4, #12
                Particle.publish(digitalEventNames[index], publishedValueHigh, 10, PRIVATE);
            } else {
                Particle.publish(digitalEventNames[index], publishedValueLow, 10, PRIVATE);
            }
        }
        digitalReading = LOW;
 80a02a2:	6033      	str	r3, [r6, #0]
    }
}

void readDigitalInputsAndPublish()
{
    for (int index = 0; index < arraySize(digitalPins); index++) 
 80a02a4:	d1dc      	bne.n	80a0260 <_Z27readDigitalInputsAndPublishv+0xc>
                Particle.publish(digitalEventNames[index], publishedValueLow, 10, PRIVATE);
            }
        }
        digitalReading = LOW;
    }
 80a02a6:	b005      	add	sp, #20
 80a02a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a02aa:	bf00      	nop
 80a02ac:	2000011c 	.word	0x2000011c
 80a02b0:	20000004 	.word	0x20000004
 80a02b4:	200001a0 	.word	0x200001a0
 80a02b8:	20000140 	.word	0x20000140
 80a02bc:	200000f0 	.word	0x200000f0
 80a02c0:	20000130 	.word	0x20000130
 80a02c4:	20000120 	.word	0x20000120

080a02c8 <loop>:
        pinMode(digitalPins[index], INPUT_PULLDOWN);
    }
}

void loop() 
{
 80a02c8:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a02ca:	f000 f9e9 	bl	80a06a0 <spark_cloud_flag_connected>
    if (Particle.connected())
 80a02ce:	b118      	cbz	r0, 80a02d8 <loop+0x10>
    {
        readAnalogInputsAndPublish();
 80a02d0:	f7ff ff5e 	bl	80a0190 <_Z26readAnalogInputsAndPublishv>
        readDigitalInputsAndPublish();
 80a02d4:	f7ff ffbe 	bl	80a0254 <_Z27readDigitalInputsAndPublishv>
    }
    delay(1000);
}
 80a02d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (Particle.connected())
    {
        readAnalogInputsAndPublish();
        readDigitalInputsAndPublish();
    }
    delay(1000);
 80a02dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a02e0:	f000 baaa 	b.w	80a0838 <delay>

080a02e4 <_GLOBAL__sub_I_pingEventName>:
                Particle.publish(digitalEventNames[index], publishedValueLow, 10, PRIVATE);
            }
        }
        digitalReading = LOW;
    }
 80a02e4:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a02e6:	4b36      	ldr	r3, [pc, #216]	; (80a03c0 <_GLOBAL__sub_I_pingEventName+0xdc>)
String pingEventName = "ping";
 80a02e8:	4c36      	ldr	r4, [pc, #216]	; (80a03c4 <_GLOBAL__sub_I_pingEventName+0xe0>)
 80a02ea:	2201      	movs	r2, #1
 80a02ec:	701a      	strb	r2, [r3, #0]
 80a02ee:	4d36      	ldr	r5, [pc, #216]	; (80a03c8 <_GLOBAL__sub_I_pingEventName+0xe4>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a02f0:	f000 f8b0 	bl	80a0454 <HAL_Pin_Map>
 80a02f4:	4e35      	ldr	r6, [pc, #212]	; (80a03cc <_GLOBAL__sub_I_pingEventName+0xe8>)
 80a02f6:	4936      	ldr	r1, [pc, #216]	; (80a03d0 <_GLOBAL__sub_I_pingEventName+0xec>)
 80a02f8:	4620      	mov	r0, r4
 80a02fa:	f000 ff7b 	bl	80a11f4 <_ZN6StringC1EPK19__FlashStringHelper>
 80a02fe:	4620      	mov	r0, r4
float analogThreshold = 0.05f;
float analogDifference;
uint16_t analogPins[6] = {A0, A1, A2, A3, A4, A5};
float analogValues[6] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
String analogEventNames[6] = {"synthings_input_analog_0", "synthings_input_analog_1", "synthings_input_analog_2", "synthings_input_analog_3", "synthings_input_analog_4", "synthings_input_analog_5"};
 80a0300:	4c34      	ldr	r4, [pc, #208]	; (80a03d4 <_GLOBAL__sub_I_pingEventName+0xf0>)
String pingEventName = "ping";
 80a0302:	462a      	mov	r2, r5
 80a0304:	4631      	mov	r1, r6
 80a0306:	f001 facb 	bl	80a18a0 <__aeabi_atexit>
float analogThreshold = 0.05f;
float analogDifference;
uint16_t analogPins[6] = {A0, A1, A2, A3, A4, A5};
float analogValues[6] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
String analogEventNames[6] = {"synthings_input_analog_0", "synthings_input_analog_1", "synthings_input_analog_2", "synthings_input_analog_3", "synthings_input_analog_4", "synthings_input_analog_5"};
 80a030a:	4933      	ldr	r1, [pc, #204]	; (80a03d8 <_GLOBAL__sub_I_pingEventName+0xf4>)
 80a030c:	4620      	mov	r0, r4
 80a030e:	f000 ff71 	bl	80a11f4 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0312:	4932      	ldr	r1, [pc, #200]	; (80a03dc <_GLOBAL__sub_I_pingEventName+0xf8>)
 80a0314:	f104 0010 	add.w	r0, r4, #16
 80a0318:	f000 ff6c 	bl	80a11f4 <_ZN6StringC1EPK19__FlashStringHelper>
 80a031c:	4930      	ldr	r1, [pc, #192]	; (80a03e0 <_GLOBAL__sub_I_pingEventName+0xfc>)
 80a031e:	f104 0020 	add.w	r0, r4, #32
 80a0322:	f000 ff67 	bl	80a11f4 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0326:	492f      	ldr	r1, [pc, #188]	; (80a03e4 <_GLOBAL__sub_I_pingEventName+0x100>)
 80a0328:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80a032c:	f000 ff62 	bl	80a11f4 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0330:	492d      	ldr	r1, [pc, #180]	; (80a03e8 <_GLOBAL__sub_I_pingEventName+0x104>)
 80a0332:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80a0336:	f000 ff5d 	bl	80a11f4 <_ZN6StringC1EPK19__FlashStringHelper>
 80a033a:	492c      	ldr	r1, [pc, #176]	; (80a03ec <_GLOBAL__sub_I_pingEventName+0x108>)
 80a033c:	f104 0050 	add.w	r0, r4, #80	; 0x50
float analogReading = 0.0f;
uint16_t digitalPins[6] = {D0, D1, D2, D3, D4, D5};
int digitalValues[6] = {LOW, LOW, LOW, LOW, LOW, LOW};
String digitalEventNames[6] = {"synthings_input_digital_0", "synthings_input_digital_1", "synthings_input_digital_2", "synthings_input_digital_3", "synthings_input_digital_4", "synthings_input_digital_5"};
 80a0340:	4c2b      	ldr	r4, [pc, #172]	; (80a03f0 <_GLOBAL__sub_I_pingEventName+0x10c>)
String pingEventName = "ping";
float analogThreshold = 0.05f;
float analogDifference;
uint16_t analogPins[6] = {A0, A1, A2, A3, A4, A5};
float analogValues[6] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
String analogEventNames[6] = {"synthings_input_analog_0", "synthings_input_analog_1", "synthings_input_analog_2", "synthings_input_analog_3", "synthings_input_analog_4", "synthings_input_analog_5"};
 80a0342:	f000 ff57 	bl	80a11f4 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0346:	462a      	mov	r2, r5
 80a0348:	492a      	ldr	r1, [pc, #168]	; (80a03f4 <_GLOBAL__sub_I_pingEventName+0x110>)
 80a034a:	2000      	movs	r0, #0
 80a034c:	f001 faa8 	bl	80a18a0 <__aeabi_atexit>
float analogReading = 0.0f;
uint16_t digitalPins[6] = {D0, D1, D2, D3, D4, D5};
int digitalValues[6] = {LOW, LOW, LOW, LOW, LOW, LOW};
String digitalEventNames[6] = {"synthings_input_digital_0", "synthings_input_digital_1", "synthings_input_digital_2", "synthings_input_digital_3", "synthings_input_digital_4", "synthings_input_digital_5"};
 80a0350:	4929      	ldr	r1, [pc, #164]	; (80a03f8 <_GLOBAL__sub_I_pingEventName+0x114>)
 80a0352:	4620      	mov	r0, r4
 80a0354:	f000 ff4e 	bl	80a11f4 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0358:	4928      	ldr	r1, [pc, #160]	; (80a03fc <_GLOBAL__sub_I_pingEventName+0x118>)
 80a035a:	f104 0010 	add.w	r0, r4, #16
 80a035e:	f000 ff49 	bl	80a11f4 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0362:	4927      	ldr	r1, [pc, #156]	; (80a0400 <_GLOBAL__sub_I_pingEventName+0x11c>)
 80a0364:	f104 0020 	add.w	r0, r4, #32
 80a0368:	f000 ff44 	bl	80a11f4 <_ZN6StringC1EPK19__FlashStringHelper>
 80a036c:	4925      	ldr	r1, [pc, #148]	; (80a0404 <_GLOBAL__sub_I_pingEventName+0x120>)
 80a036e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80a0372:	f000 ff3f 	bl	80a11f4 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0376:	4924      	ldr	r1, [pc, #144]	; (80a0408 <_GLOBAL__sub_I_pingEventName+0x124>)
 80a0378:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80a037c:	f000 ff3a 	bl	80a11f4 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0380:	4922      	ldr	r1, [pc, #136]	; (80a040c <_GLOBAL__sub_I_pingEventName+0x128>)
 80a0382:	f104 0050 	add.w	r0, r4, #80	; 0x50
int digitalReading = LOW;
String publishedValueLow = "Off";
 80a0386:	4c22      	ldr	r4, [pc, #136]	; (80a0410 <_GLOBAL__sub_I_pingEventName+0x12c>)
float analogValues[6] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
String analogEventNames[6] = {"synthings_input_analog_0", "synthings_input_analog_1", "synthings_input_analog_2", "synthings_input_analog_3", "synthings_input_analog_4", "synthings_input_analog_5"};
float analogReading = 0.0f;
uint16_t digitalPins[6] = {D0, D1, D2, D3, D4, D5};
int digitalValues[6] = {LOW, LOW, LOW, LOW, LOW, LOW};
String digitalEventNames[6] = {"synthings_input_digital_0", "synthings_input_digital_1", "synthings_input_digital_2", "synthings_input_digital_3", "synthings_input_digital_4", "synthings_input_digital_5"};
 80a0388:	f000 ff34 	bl	80a11f4 <_ZN6StringC1EPK19__FlashStringHelper>
 80a038c:	462a      	mov	r2, r5
 80a038e:	4921      	ldr	r1, [pc, #132]	; (80a0414 <_GLOBAL__sub_I_pingEventName+0x130>)
 80a0390:	2000      	movs	r0, #0
 80a0392:	f001 fa85 	bl	80a18a0 <__aeabi_atexit>
int digitalReading = LOW;
String publishedValueLow = "Off";
 80a0396:	4920      	ldr	r1, [pc, #128]	; (80a0418 <_GLOBAL__sub_I_pingEventName+0x134>)
 80a0398:	4620      	mov	r0, r4
 80a039a:	f000 ff2b 	bl	80a11f4 <_ZN6StringC1EPK19__FlashStringHelper>
 80a039e:	4620      	mov	r0, r4
String publishedValueHigh = "On";
 80a03a0:	4c1e      	ldr	r4, [pc, #120]	; (80a041c <_GLOBAL__sub_I_pingEventName+0x138>)
float analogReading = 0.0f;
uint16_t digitalPins[6] = {D0, D1, D2, D3, D4, D5};
int digitalValues[6] = {LOW, LOW, LOW, LOW, LOW, LOW};
String digitalEventNames[6] = {"synthings_input_digital_0", "synthings_input_digital_1", "synthings_input_digital_2", "synthings_input_digital_3", "synthings_input_digital_4", "synthings_input_digital_5"};
int digitalReading = LOW;
String publishedValueLow = "Off";
 80a03a2:	462a      	mov	r2, r5
 80a03a4:	4631      	mov	r1, r6
 80a03a6:	f001 fa7b 	bl	80a18a0 <__aeabi_atexit>
String publishedValueHigh = "On";
 80a03aa:	491d      	ldr	r1, [pc, #116]	; (80a0420 <_GLOBAL__sub_I_pingEventName+0x13c>)
 80a03ac:	4620      	mov	r0, r4
 80a03ae:	f000 ff21 	bl	80a11f4 <_ZN6StringC1EPK19__FlashStringHelper>
 80a03b2:	462a      	mov	r2, r5
 80a03b4:	4631      	mov	r1, r6
 80a03b6:	4620      	mov	r0, r4
                Particle.publish(digitalEventNames[index], publishedValueLow, 10, PRIVATE);
            }
        }
        digitalReading = LOW;
    }
 80a03b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
uint16_t digitalPins[6] = {D0, D1, D2, D3, D4, D5};
int digitalValues[6] = {LOW, LOW, LOW, LOW, LOW, LOW};
String digitalEventNames[6] = {"synthings_input_digital_0", "synthings_input_digital_1", "synthings_input_digital_2", "synthings_input_digital_3", "synthings_input_digital_4", "synthings_input_digital_5"};
int digitalReading = LOW;
String publishedValueLow = "Off";
String publishedValueHigh = "On";
 80a03bc:	f001 ba70 	b.w	80a18a0 <__aeabi_atexit>
 80a03c0:	200000f0 	.word	0x200000f0
 80a03c4:	2000010c 	.word	0x2000010c
 80a03c8:	20000084 	.word	0x20000084
 80a03cc:	080a1167 	.word	0x080a1167
 80a03d0:	080a28d1 	.word	0x080a28d1
 80a03d4:	20000090 	.word	0x20000090
 80a03d8:	080a28d6 	.word	0x080a28d6
 80a03dc:	080a28ef 	.word	0x080a28ef
 80a03e0:	080a2908 	.word	0x080a2908
 80a03e4:	080a2921 	.word	0x080a2921
 80a03e8:	080a293a 	.word	0x080a293a
 80a03ec:	080a2953 	.word	0x080a2953
 80a03f0:	20000140 	.word	0x20000140
 80a03f4:	080a00d9 	.word	0x080a00d9
 80a03f8:	080a296c 	.word	0x080a296c
 80a03fc:	080a2986 	.word	0x080a2986
 80a0400:	080a29a0 	.word	0x080a29a0
 80a0404:	080a29ba 	.word	0x080a29ba
 80a0408:	080a29d4 	.word	0x080a29d4
 80a040c:	080a29ee 	.word	0x080a29ee
 80a0410:	20000120 	.word	0x20000120
 80a0414:	080a00b9 	.word	0x080a00b9
 80a0418:	080a2a08 	.word	0x080a2a08
 80a041c:	20000130 	.word	0x20000130
 80a0420:	080a2a0c 	.word	0x080a2a0c

080a0424 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0424:	b508      	push	{r3, lr}
 80a0426:	4b02      	ldr	r3, [pc, #8]	; (80a0430 <os_mutex_create+0xc>)
 80a0428:	681b      	ldr	r3, [r3, #0]
 80a042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a042c:	9301      	str	r3, [sp, #4]
 80a042e:	bd08      	pop	{r3, pc}
 80a0430:	080601d0 	.word	0x080601d0

080a0434 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0434:	b508      	push	{r3, lr}
 80a0436:	4b02      	ldr	r3, [pc, #8]	; (80a0440 <HAL_RNG_GetRandomNumber+0xc>)
 80a0438:	681b      	ldr	r3, [r3, #0]
 80a043a:	685b      	ldr	r3, [r3, #4]
 80a043c:	9301      	str	r3, [sp, #4]
 80a043e:	bd08      	pop	{r3, pc}
 80a0440:	0806019c 	.word	0x0806019c

080a0444 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0444:	b508      	push	{r3, lr}
 80a0446:	4b02      	ldr	r3, [pc, #8]	; (80a0450 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0448:	681b      	ldr	r3, [r3, #0]
 80a044a:	695b      	ldr	r3, [r3, #20]
 80a044c:	9301      	str	r3, [sp, #4]
 80a044e:	bd08      	pop	{r3, pc}
 80a0450:	0806019c 	.word	0x0806019c

080a0454 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0454:	b508      	push	{r3, lr}
 80a0456:	4b02      	ldr	r3, [pc, #8]	; (80a0460 <HAL_Pin_Map+0xc>)
 80a0458:	681b      	ldr	r3, [r3, #0]
 80a045a:	681b      	ldr	r3, [r3, #0]
 80a045c:	9301      	str	r3, [sp, #4]
 80a045e:	bd08      	pop	{r3, pc}
 80a0460:	080601b0 	.word	0x080601b0

080a0464 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a0464:	b508      	push	{r3, lr}
 80a0466:	4b02      	ldr	r3, [pc, #8]	; (80a0470 <HAL_Validate_Pin_Function+0xc>)
 80a0468:	681b      	ldr	r3, [r3, #0]
 80a046a:	685b      	ldr	r3, [r3, #4]
 80a046c:	9301      	str	r3, [sp, #4]
 80a046e:	bd08      	pop	{r3, pc}
 80a0470:	080601b0 	.word	0x080601b0

080a0474 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0474:	b508      	push	{r3, lr}
 80a0476:	4b02      	ldr	r3, [pc, #8]	; (80a0480 <HAL_Pin_Mode+0xc>)
 80a0478:	681b      	ldr	r3, [r3, #0]
 80a047a:	689b      	ldr	r3, [r3, #8]
 80a047c:	9301      	str	r3, [sp, #4]
 80a047e:	bd08      	pop	{r3, pc}
 80a0480:	080601b0 	.word	0x080601b0

080a0484 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0484:	b508      	push	{r3, lr}
 80a0486:	4b02      	ldr	r3, [pc, #8]	; (80a0490 <HAL_Get_Pin_Mode+0xc>)
 80a0488:	681b      	ldr	r3, [r3, #0]
 80a048a:	68db      	ldr	r3, [r3, #12]
 80a048c:	9301      	str	r3, [sp, #4]
 80a048e:	bd08      	pop	{r3, pc}
 80a0490:	080601b0 	.word	0x080601b0

080a0494 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a0494:	b508      	push	{r3, lr}
 80a0496:	4b02      	ldr	r3, [pc, #8]	; (80a04a0 <HAL_GPIO_Read+0xc>)
 80a0498:	681b      	ldr	r3, [r3, #0]
 80a049a:	695b      	ldr	r3, [r3, #20]
 80a049c:	9301      	str	r3, [sp, #4]
 80a049e:	bd08      	pop	{r3, pc}
 80a04a0:	080601b0 	.word	0x080601b0

080a04a4 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a04a4:	b508      	push	{r3, lr}
 80a04a6:	4b02      	ldr	r3, [pc, #8]	; (80a04b0 <HAL_ADC_Read+0xc>)
 80a04a8:	681b      	ldr	r3, [r3, #0]
 80a04aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a04ac:	9301      	str	r3, [sp, #4]
 80a04ae:	bd08      	pop	{r3, pc}
 80a04b0:	080601b0 	.word	0x080601b0

080a04b4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a04b4:	b508      	push	{r3, lr}
 80a04b6:	4b02      	ldr	r3, [pc, #8]	; (80a04c0 <HAL_I2C_Write_Data+0xc>)
 80a04b8:	681b      	ldr	r3, [r3, #0]
 80a04ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a04bc:	9301      	str	r3, [sp, #4]
 80a04be:	bd08      	pop	{r3, pc}
 80a04c0:	080601ac 	.word	0x080601ac

080a04c4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a04c4:	b508      	push	{r3, lr}
 80a04c6:	4b02      	ldr	r3, [pc, #8]	; (80a04d0 <HAL_I2C_Available_Data+0xc>)
 80a04c8:	681b      	ldr	r3, [r3, #0]
 80a04ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a04cc:	9301      	str	r3, [sp, #4]
 80a04ce:	bd08      	pop	{r3, pc}
 80a04d0:	080601ac 	.word	0x080601ac

080a04d4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a04d4:	b508      	push	{r3, lr}
 80a04d6:	4b02      	ldr	r3, [pc, #8]	; (80a04e0 <HAL_I2C_Read_Data+0xc>)
 80a04d8:	681b      	ldr	r3, [r3, #0]
 80a04da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a04dc:	9301      	str	r3, [sp, #4]
 80a04de:	bd08      	pop	{r3, pc}
 80a04e0:	080601ac 	.word	0x080601ac

080a04e4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a04e4:	b508      	push	{r3, lr}
 80a04e6:	4b02      	ldr	r3, [pc, #8]	; (80a04f0 <HAL_I2C_Peek_Data+0xc>)
 80a04e8:	681b      	ldr	r3, [r3, #0]
 80a04ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a04ec:	9301      	str	r3, [sp, #4]
 80a04ee:	bd08      	pop	{r3, pc}
 80a04f0:	080601ac 	.word	0x080601ac

080a04f4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a04f4:	b508      	push	{r3, lr}
 80a04f6:	4b02      	ldr	r3, [pc, #8]	; (80a0500 <HAL_I2C_Flush_Data+0xc>)
 80a04f8:	681b      	ldr	r3, [r3, #0]
 80a04fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a04fc:	9301      	str	r3, [sp, #4]
 80a04fe:	bd08      	pop	{r3, pc}
 80a0500:	080601ac 	.word	0x080601ac

080a0504 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0504:	b508      	push	{r3, lr}
 80a0506:	4b02      	ldr	r3, [pc, #8]	; (80a0510 <HAL_I2C_Is_Enabled+0xc>)
 80a0508:	681b      	ldr	r3, [r3, #0]
 80a050a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a050c:	9301      	str	r3, [sp, #4]
 80a050e:	bd08      	pop	{r3, pc}
 80a0510:	080601ac 	.word	0x080601ac

080a0514 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0514:	b508      	push	{r3, lr}
 80a0516:	4b03      	ldr	r3, [pc, #12]	; (80a0524 <HAL_I2C_Init+0x10>)
 80a0518:	681b      	ldr	r3, [r3, #0]
 80a051a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a051e:	9301      	str	r3, [sp, #4]
 80a0520:	bd08      	pop	{r3, pc}
 80a0522:	0000      	.short	0x0000
 80a0524:	080601ac 	.word	0x080601ac

080a0528 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0528:	b508      	push	{r3, lr}
 80a052a:	4b02      	ldr	r3, [pc, #8]	; (80a0534 <HAL_SPI_Init+0xc>)
 80a052c:	681b      	ldr	r3, [r3, #0]
 80a052e:	69db      	ldr	r3, [r3, #28]
 80a0530:	9301      	str	r3, [sp, #4]
 80a0532:	bd08      	pop	{r3, pc}
 80a0534:	080601b4 	.word	0x080601b4

080a0538 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0538:	b508      	push	{r3, lr}
 80a053a:	4b02      	ldr	r3, [pc, #8]	; (80a0544 <HAL_SPI_Is_Enabled+0xc>)
 80a053c:	681b      	ldr	r3, [r3, #0]
 80a053e:	6a1b      	ldr	r3, [r3, #32]
 80a0540:	9301      	str	r3, [sp, #4]
 80a0542:	bd08      	pop	{r3, pc}
 80a0544:	080601b4 	.word	0x080601b4

080a0548 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0548:	b508      	push	{r3, lr}
 80a054a:	4b02      	ldr	r3, [pc, #8]	; (80a0554 <HAL_USART_Init+0xc>)
 80a054c:	681b      	ldr	r3, [r3, #0]
 80a054e:	699b      	ldr	r3, [r3, #24]
 80a0550:	9301      	str	r3, [sp, #4]
 80a0552:	bd08      	pop	{r3, pc}
 80a0554:	080601c4 	.word	0x080601c4

080a0558 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0558:	b508      	push	{r3, lr}
 80a055a:	4b02      	ldr	r3, [pc, #8]	; (80a0564 <HAL_USART_Write_Data+0xc>)
 80a055c:	681b      	ldr	r3, [r3, #0]
 80a055e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0560:	9301      	str	r3, [sp, #4]
 80a0562:	bd08      	pop	{r3, pc}
 80a0564:	080601c4 	.word	0x080601c4

080a0568 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0568:	b508      	push	{r3, lr}
 80a056a:	4b02      	ldr	r3, [pc, #8]	; (80a0574 <HAL_USART_Available_Data+0xc>)
 80a056c:	681b      	ldr	r3, [r3, #0]
 80a056e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0570:	9301      	str	r3, [sp, #4]
 80a0572:	bd08      	pop	{r3, pc}
 80a0574:	080601c4 	.word	0x080601c4

080a0578 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0578:	b508      	push	{r3, lr}
 80a057a:	4b02      	ldr	r3, [pc, #8]	; (80a0584 <HAL_USART_Read_Data+0xc>)
 80a057c:	681b      	ldr	r3, [r3, #0]
 80a057e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0580:	9301      	str	r3, [sp, #4]
 80a0582:	bd08      	pop	{r3, pc}
 80a0584:	080601c4 	.word	0x080601c4

080a0588 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0588:	b508      	push	{r3, lr}
 80a058a:	4b02      	ldr	r3, [pc, #8]	; (80a0594 <HAL_USART_Peek_Data+0xc>)
 80a058c:	681b      	ldr	r3, [r3, #0]
 80a058e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0590:	9301      	str	r3, [sp, #4]
 80a0592:	bd08      	pop	{r3, pc}
 80a0594:	080601c4 	.word	0x080601c4

080a0598 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0598:	b508      	push	{r3, lr}
 80a059a:	4b02      	ldr	r3, [pc, #8]	; (80a05a4 <HAL_USART_Flush_Data+0xc>)
 80a059c:	681b      	ldr	r3, [r3, #0]
 80a059e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a05a0:	9301      	str	r3, [sp, #4]
 80a05a2:	bd08      	pop	{r3, pc}
 80a05a4:	080601c4 	.word	0x080601c4

080a05a8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a05a8:	b508      	push	{r3, lr}
 80a05aa:	4b02      	ldr	r3, [pc, #8]	; (80a05b4 <HAL_USART_Is_Enabled+0xc>)
 80a05ac:	681b      	ldr	r3, [r3, #0]
 80a05ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a05b0:	9301      	str	r3, [sp, #4]
 80a05b2:	bd08      	pop	{r3, pc}
 80a05b4:	080601c4 	.word	0x080601c4

080a05b8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a05b8:	b508      	push	{r3, lr}
 80a05ba:	4b02      	ldr	r3, [pc, #8]	; (80a05c4 <HAL_USART_Available_Data_For_Write+0xc>)
 80a05bc:	681b      	ldr	r3, [r3, #0]
 80a05be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a05c0:	9301      	str	r3, [sp, #4]
 80a05c2:	bd08      	pop	{r3, pc}
 80a05c4:	080601c4 	.word	0x080601c4

080a05c8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a05c8:	b508      	push	{r3, lr}
 80a05ca:	4b02      	ldr	r3, [pc, #8]	; (80a05d4 <HAL_USB_USART_Init+0xc>)
 80a05cc:	681b      	ldr	r3, [r3, #0]
 80a05ce:	681b      	ldr	r3, [r3, #0]
 80a05d0:	9301      	str	r3, [sp, #4]
 80a05d2:	bd08      	pop	{r3, pc}
 80a05d4:	080601d8 	.word	0x080601d8

080a05d8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a05d8:	b508      	push	{r3, lr}
 80a05da:	4b02      	ldr	r3, [pc, #8]	; (80a05e4 <HAL_USB_USART_Available_Data+0xc>)
 80a05dc:	681b      	ldr	r3, [r3, #0]
 80a05de:	691b      	ldr	r3, [r3, #16]
 80a05e0:	9301      	str	r3, [sp, #4]
 80a05e2:	bd08      	pop	{r3, pc}
 80a05e4:	080601d8 	.word	0x080601d8

080a05e8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a05e8:	b508      	push	{r3, lr}
 80a05ea:	4b02      	ldr	r3, [pc, #8]	; (80a05f4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a05ec:	681b      	ldr	r3, [r3, #0]
 80a05ee:	695b      	ldr	r3, [r3, #20]
 80a05f0:	9301      	str	r3, [sp, #4]
 80a05f2:	bd08      	pop	{r3, pc}
 80a05f4:	080601d8 	.word	0x080601d8

080a05f8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a05f8:	b508      	push	{r3, lr}
 80a05fa:	4b02      	ldr	r3, [pc, #8]	; (80a0604 <HAL_USB_USART_Receive_Data+0xc>)
 80a05fc:	681b      	ldr	r3, [r3, #0]
 80a05fe:	699b      	ldr	r3, [r3, #24]
 80a0600:	9301      	str	r3, [sp, #4]
 80a0602:	bd08      	pop	{r3, pc}
 80a0604:	080601d8 	.word	0x080601d8

080a0608 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0608:	b508      	push	{r3, lr}
 80a060a:	4b02      	ldr	r3, [pc, #8]	; (80a0614 <HAL_USB_USART_Send_Data+0xc>)
 80a060c:	681b      	ldr	r3, [r3, #0]
 80a060e:	69db      	ldr	r3, [r3, #28]
 80a0610:	9301      	str	r3, [sp, #4]
 80a0612:	bd08      	pop	{r3, pc}
 80a0614:	080601d8 	.word	0x080601d8

080a0618 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0618:	b508      	push	{r3, lr}
 80a061a:	4b02      	ldr	r3, [pc, #8]	; (80a0624 <HAL_USB_USART_Flush_Data+0xc>)
 80a061c:	681b      	ldr	r3, [r3, #0]
 80a061e:	6a1b      	ldr	r3, [r3, #32]
 80a0620:	9301      	str	r3, [sp, #4]
 80a0622:	bd08      	pop	{r3, pc}
 80a0624:	080601d8 	.word	0x080601d8

080a0628 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0628:	b508      	push	{r3, lr}
 80a062a:	4b02      	ldr	r3, [pc, #8]	; (80a0634 <inet_gethostbyname+0xc>)
 80a062c:	681b      	ldr	r3, [r3, #0]
 80a062e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0630:	9301      	str	r3, [sp, #4]
 80a0632:	bd08      	pop	{r3, pc}
 80a0634:	080601c0 	.word	0x080601c0

080a0638 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0638:	b508      	push	{r3, lr}
 80a063a:	4b02      	ldr	r3, [pc, #8]	; (80a0644 <set_system_mode+0xc>)
 80a063c:	681b      	ldr	r3, [r3, #0]
 80a063e:	685b      	ldr	r3, [r3, #4]
 80a0640:	9301      	str	r3, [sp, #4]
 80a0642:	bd08      	pop	{r3, pc}
 80a0644:	080601a4 	.word	0x080601a4

080a0648 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0648:	b508      	push	{r3, lr}
 80a064a:	4b02      	ldr	r3, [pc, #8]	; (80a0654 <system_delay_ms+0xc>)
 80a064c:	681b      	ldr	r3, [r3, #0]
 80a064e:	695b      	ldr	r3, [r3, #20]
 80a0650:	9301      	str	r3, [sp, #4]
 80a0652:	bd08      	pop	{r3, pc}
 80a0654:	080601a4 	.word	0x080601a4

080a0658 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0658:	b508      	push	{r3, lr}
 80a065a:	4b02      	ldr	r3, [pc, #8]	; (80a0664 <application_thread_current+0xc>)
 80a065c:	681b      	ldr	r3, [r3, #0]
 80a065e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0660:	9301      	str	r3, [sp, #4]
 80a0662:	bd08      	pop	{r3, pc}
 80a0664:	080601a4 	.word	0x080601a4

080a0668 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0668:	b508      	push	{r3, lr}
 80a066a:	4b02      	ldr	r3, [pc, #8]	; (80a0674 <application_thread_invoke+0xc>)
 80a066c:	681b      	ldr	r3, [r3, #0]
 80a066e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0670:	9301      	str	r3, [sp, #4]
 80a0672:	bd08      	pop	{r3, pc}
 80a0674:	080601a4 	.word	0x080601a4

080a0678 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0678:	b508      	push	{r3, lr}
 80a067a:	4b03      	ldr	r3, [pc, #12]	; (80a0688 <system_ctrl_set_app_request_handler+0x10>)
 80a067c:	681b      	ldr	r3, [r3, #0]
 80a067e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0682:	9301      	str	r3, [sp, #4]
 80a0684:	bd08      	pop	{r3, pc}
 80a0686:	0000      	.short	0x0000
 80a0688:	080601a4 	.word	0x080601a4

080a068c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a068c:	b508      	push	{r3, lr}
 80a068e:	4b03      	ldr	r3, [pc, #12]	; (80a069c <system_ctrl_set_result+0x10>)
 80a0690:	681b      	ldr	r3, [r3, #0]
 80a0692:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0696:	9301      	str	r3, [sp, #4]
 80a0698:	bd08      	pop	{r3, pc}
 80a069a:	0000      	.short	0x0000
 80a069c:	080601a4 	.word	0x080601a4

080a06a0 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a06a0:	b508      	push	{r3, lr}
 80a06a2:	4b02      	ldr	r3, [pc, #8]	; (80a06ac <spark_cloud_flag_connected+0xc>)
 80a06a4:	681b      	ldr	r3, [r3, #0]
 80a06a6:	695b      	ldr	r3, [r3, #20]
 80a06a8:	9301      	str	r3, [sp, #4]
 80a06aa:	bd08      	pop	{r3, pc}
 80a06ac:	080601cc 	.word	0x080601cc

080a06b0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a06b0:	b508      	push	{r3, lr}
 80a06b2:	4b02      	ldr	r3, [pc, #8]	; (80a06bc <spark_send_event+0xc>)
 80a06b4:	681b      	ldr	r3, [r3, #0]
 80a06b6:	6a1b      	ldr	r3, [r3, #32]
 80a06b8:	9301      	str	r3, [sp, #4]
 80a06ba:	bd08      	pop	{r3, pc}
 80a06bc:	080601cc 	.word	0x080601cc

080a06c0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a06c0:	b508      	push	{r3, lr}
 80a06c2:	4b02      	ldr	r3, [pc, #8]	; (80a06cc <spark_set_random_seed_from_cloud_handler+0xc>)
 80a06c4:	681b      	ldr	r3, [r3, #0]
 80a06c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a06c8:	9301      	str	r3, [sp, #4]
 80a06ca:	bd08      	pop	{r3, pc}
 80a06cc:	080601cc 	.word	0x080601cc

080a06d0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a06d0:	b508      	push	{r3, lr}
 80a06d2:	4b02      	ldr	r3, [pc, #8]	; (80a06dc <network_connect+0xc>)
 80a06d4:	681b      	ldr	r3, [r3, #0]
 80a06d6:	685b      	ldr	r3, [r3, #4]
 80a06d8:	9301      	str	r3, [sp, #4]
 80a06da:	bd08      	pop	{r3, pc}
 80a06dc:	080601c8 	.word	0x080601c8

080a06e0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a06e0:	b508      	push	{r3, lr}
 80a06e2:	4b02      	ldr	r3, [pc, #8]	; (80a06ec <network_connecting+0xc>)
 80a06e4:	681b      	ldr	r3, [r3, #0]
 80a06e6:	689b      	ldr	r3, [r3, #8]
 80a06e8:	9301      	str	r3, [sp, #4]
 80a06ea:	bd08      	pop	{r3, pc}
 80a06ec:	080601c8 	.word	0x080601c8

080a06f0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a06f0:	b508      	push	{r3, lr}
 80a06f2:	4b02      	ldr	r3, [pc, #8]	; (80a06fc <network_disconnect+0xc>)
 80a06f4:	681b      	ldr	r3, [r3, #0]
 80a06f6:	68db      	ldr	r3, [r3, #12]
 80a06f8:	9301      	str	r3, [sp, #4]
 80a06fa:	bd08      	pop	{r3, pc}
 80a06fc:	080601c8 	.word	0x080601c8

080a0700 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0700:	b508      	push	{r3, lr}
 80a0702:	4b02      	ldr	r3, [pc, #8]	; (80a070c <network_ready+0xc>)
 80a0704:	681b      	ldr	r3, [r3, #0]
 80a0706:	691b      	ldr	r3, [r3, #16]
 80a0708:	9301      	str	r3, [sp, #4]
 80a070a:	bd08      	pop	{r3, pc}
 80a070c:	080601c8 	.word	0x080601c8

080a0710 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0710:	b508      	push	{r3, lr}
 80a0712:	4b02      	ldr	r3, [pc, #8]	; (80a071c <network_on+0xc>)
 80a0714:	681b      	ldr	r3, [r3, #0]
 80a0716:	695b      	ldr	r3, [r3, #20]
 80a0718:	9301      	str	r3, [sp, #4]
 80a071a:	bd08      	pop	{r3, pc}
 80a071c:	080601c8 	.word	0x080601c8

080a0720 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0720:	b508      	push	{r3, lr}
 80a0722:	4b02      	ldr	r3, [pc, #8]	; (80a072c <network_off+0xc>)
 80a0724:	681b      	ldr	r3, [r3, #0]
 80a0726:	699b      	ldr	r3, [r3, #24]
 80a0728:	9301      	str	r3, [sp, #4]
 80a072a:	bd08      	pop	{r3, pc}
 80a072c:	080601c8 	.word	0x080601c8

080a0730 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0730:	b508      	push	{r3, lr}
 80a0732:	4b02      	ldr	r3, [pc, #8]	; (80a073c <network_listen+0xc>)
 80a0734:	681b      	ldr	r3, [r3, #0]
 80a0736:	69db      	ldr	r3, [r3, #28]
 80a0738:	9301      	str	r3, [sp, #4]
 80a073a:	bd08      	pop	{r3, pc}
 80a073c:	080601c8 	.word	0x080601c8

080a0740 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0740:	b508      	push	{r3, lr}
 80a0742:	4b02      	ldr	r3, [pc, #8]	; (80a074c <network_listening+0xc>)
 80a0744:	681b      	ldr	r3, [r3, #0]
 80a0746:	6a1b      	ldr	r3, [r3, #32]
 80a0748:	9301      	str	r3, [sp, #4]
 80a074a:	bd08      	pop	{r3, pc}
 80a074c:	080601c8 	.word	0x080601c8

080a0750 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0750:	b508      	push	{r3, lr}
 80a0752:	4b02      	ldr	r3, [pc, #8]	; (80a075c <network_set_listen_timeout+0xc>)
 80a0754:	681b      	ldr	r3, [r3, #0]
 80a0756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0758:	9301      	str	r3, [sp, #4]
 80a075a:	bd08      	pop	{r3, pc}
 80a075c:	080601c8 	.word	0x080601c8

080a0760 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0760:	b508      	push	{r3, lr}
 80a0762:	4b02      	ldr	r3, [pc, #8]	; (80a076c <network_get_listen_timeout+0xc>)
 80a0764:	681b      	ldr	r3, [r3, #0]
 80a0766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0768:	9301      	str	r3, [sp, #4]
 80a076a:	bd08      	pop	{r3, pc}
 80a076c:	080601c8 	.word	0x080601c8

080a0770 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0770:	b508      	push	{r3, lr}
 80a0772:	4b02      	ldr	r3, [pc, #8]	; (80a077c <malloc+0xc>)
 80a0774:	681b      	ldr	r3, [r3, #0]
 80a0776:	681b      	ldr	r3, [r3, #0]
 80a0778:	9301      	str	r3, [sp, #4]
 80a077a:	bd08      	pop	{r3, pc}
 80a077c:	080601a0 	.word	0x080601a0

080a0780 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0780:	b508      	push	{r3, lr}
 80a0782:	4b02      	ldr	r3, [pc, #8]	; (80a078c <free+0xc>)
 80a0784:	681b      	ldr	r3, [r3, #0]
 80a0786:	685b      	ldr	r3, [r3, #4]
 80a0788:	9301      	str	r3, [sp, #4]
 80a078a:	bd08      	pop	{r3, pc}
 80a078c:	080601a0 	.word	0x080601a0

080a0790 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0790:	b508      	push	{r3, lr}
 80a0792:	4b02      	ldr	r3, [pc, #8]	; (80a079c <realloc+0xc>)
 80a0794:	681b      	ldr	r3, [r3, #0]
 80a0796:	689b      	ldr	r3, [r3, #8]
 80a0798:	9301      	str	r3, [sp, #4]
 80a079a:	bd08      	pop	{r3, pc}
 80a079c:	080601a0 	.word	0x080601a0

080a07a0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a07a0:	b508      	push	{r3, lr}
 80a07a2:	4b02      	ldr	r3, [pc, #8]	; (80a07ac <vsnprintf+0xc>)
 80a07a4:	681b      	ldr	r3, [r3, #0]
 80a07a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a07a8:	9301      	str	r3, [sp, #4]
 80a07aa:	bd08      	pop	{r3, pc}
 80a07ac:	080601a0 	.word	0x080601a0

080a07b0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a07b0:	b508      	push	{r3, lr}
 80a07b2:	4b02      	ldr	r3, [pc, #8]	; (80a07bc <abort+0xc>)
 80a07b4:	681b      	ldr	r3, [r3, #0]
 80a07b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a07b8:	9301      	str	r3, [sp, #4]
 80a07ba:	bd08      	pop	{r3, pc}
 80a07bc:	080601a0 	.word	0x080601a0

080a07c0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a07c0:	b508      	push	{r3, lr}
 80a07c2:	4b02      	ldr	r3, [pc, #8]	; (80a07cc <_malloc_r+0xc>)
 80a07c4:	681b      	ldr	r3, [r3, #0]
 80a07c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a07c8:	9301      	str	r3, [sp, #4]
 80a07ca:	bd08      	pop	{r3, pc}
 80a07cc:	080601a0 	.word	0x080601a0

080a07d0 <_Z3mapddddd>:
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
 80a07d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a07d2:	4604      	mov	r4, r0
 80a07d4:	460d      	mov	r5, r1
    if (fromEnd == fromStart) {
 80a07d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
 80a07da:	4616      	mov	r6, r2
 80a07dc:	461f      	mov	r7, r3
    if (fromEnd == fromStart) {
 80a07de:	f001 fdd1 	bl	80a2384 <__aeabi_dcmpeq>
 80a07e2:	bb30      	cbnz	r0, 80a0832 <_Z3mapddddd+0x62>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
 80a07e4:	4632      	mov	r2, r6
 80a07e6:	463b      	mov	r3, r7
 80a07e8:	4620      	mov	r0, r4
 80a07ea:	4629      	mov	r1, r5
 80a07ec:	f001 f9ae 	bl	80a1b4c <__aeabi_dsub>
 80a07f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a07f4:	4604      	mov	r4, r0
 80a07f6:	460d      	mov	r5, r1
 80a07f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a07fc:	f001 f9a6 	bl	80a1b4c <__aeabi_dsub>
 80a0800:	4602      	mov	r2, r0
 80a0802:	460b      	mov	r3, r1
 80a0804:	4620      	mov	r0, r4
 80a0806:	4629      	mov	r1, r5
 80a0808:	f001 fb54 	bl	80a1eb4 <__aeabi_dmul>
 80a080c:	4632      	mov	r2, r6
 80a080e:	4604      	mov	r4, r0
 80a0810:	460d      	mov	r5, r1
 80a0812:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a0816:	463b      	mov	r3, r7
 80a0818:	f001 f998 	bl	80a1b4c <__aeabi_dsub>
 80a081c:	4602      	mov	r2, r0
 80a081e:	460b      	mov	r3, r1
 80a0820:	4620      	mov	r0, r4
 80a0822:	4629      	mov	r1, r5
 80a0824:	f001 fc70 	bl	80a2108 <__aeabi_ddiv>
 80a0828:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a082c:	f001 f990 	bl	80a1b50 <__adddf3>
 80a0830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
    if (fromEnd == fromStart) {
        return value;
 80a0832:	4620      	mov	r0, r4
 80a0834:	4629      	mov	r1, r5
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}
 80a0836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0838 <delay>:

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0838:	2100      	movs	r1, #0
 80a083a:	f7ff bf05 	b.w	80a0648 <system_delay_ms>

080a083e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a083e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0840:	6883      	ldr	r3, [r0, #8]
 80a0842:	4604      	mov	r4, r0
 80a0844:	b90b      	cbnz	r3, 80a084a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a0846:	f001 f832 	bl	80a18ae <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a084a:	68c3      	ldr	r3, [r0, #12]
 80a084c:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a084e:	68a3      	ldr	r3, [r4, #8]
 80a0850:	b11b      	cbz	r3, 80a085a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0852:	2203      	movs	r2, #3
 80a0854:	4621      	mov	r1, r4
 80a0856:	4620      	mov	r0, r4
 80a0858:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a085a:	4620      	mov	r0, r4
}
 80a085c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a0860:	2110      	movs	r1, #16
 80a0862:	f001 b822 	b.w	80a18aa <_ZdlPvj>

080a0866 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0866:	4770      	bx	lr

080a0868 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a0868:	2000      	movs	r0, #0
 80a086a:	4770      	bx	lr

080a086c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a086c:	b510      	push	{r4, lr}
 80a086e:	4604      	mov	r4, r0
 80a0870:	2110      	movs	r1, #16
 80a0872:	f001 f81a 	bl	80a18aa <_ZdlPvj>
 80a0876:	4620      	mov	r0, r4
 80a0878:	bd10      	pop	{r4, pc}

080a087a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a087a:	b508      	push	{r3, lr}
      { delete this; }
 80a087c:	b108      	cbz	r0, 80a0882 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a087e:	f7ff fff5 	bl	80a086c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a0882:	bd08      	pop	{r3, pc}

080a0884 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0884:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0886:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0888:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a088a:	b113      	cbz	r3, 80a0892 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a088c:	2203      	movs	r2, #3
 80a088e:	4601      	mov	r1, r0
 80a0890:	4798      	blx	r3
    }
 80a0892:	4620      	mov	r0, r4
 80a0894:	bd10      	pop	{r4, pc}

080a0896 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0896:	2200      	movs	r2, #0
 80a0898:	6002      	str	r2, [r0, #0]
 80a089a:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a089e:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a08a0:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a08a2:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a08a6:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a08a8:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a08aa:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a08ac:	680c      	ldr	r4, [r1, #0]
 80a08ae:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a08b0:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a08b2:	bd10      	pop	{r4, pc}

080a08b4 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a08b4:	b510      	push	{r4, lr}
 80a08b6:	4604      	mov	r4, r0
    free((void*)msg_);
 80a08b8:	6800      	ldr	r0, [r0, #0]
 80a08ba:	f7ff ff61 	bl	80a0780 <free>
}
 80a08be:	4620      	mov	r0, r4
 80a08c0:	bd10      	pop	{r4, pc}

080a08c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a08c2:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a08c4:	68c4      	ldr	r4, [r0, #12]
 80a08c6:	b1f4      	cbz	r4, 80a0906 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a08c8:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a08ca:	2b02      	cmp	r3, #2
 80a08cc:	d103      	bne.n	80a08d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a08ce:	f104 000c 	add.w	r0, r4, #12
 80a08d2:	f7ff ffef 	bl	80a08b4 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a08d6:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a08d8:	b135      	cbz	r5, 80a08e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a08da:	4628      	mov	r0, r5
 80a08dc:	f7ff ffd2 	bl	80a0884 <_ZNSt14_Function_baseD1Ev>
 80a08e0:	2110      	movs	r1, #16
 80a08e2:	4628      	mov	r0, r5
 80a08e4:	f000 ffe1 	bl	80a18aa <_ZdlPvj>
 80a08e8:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a08ea:	b135      	cbz	r5, 80a08fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a08ec:	4628      	mov	r0, r5
 80a08ee:	f7ff ffc9 	bl	80a0884 <_ZNSt14_Function_baseD1Ev>
 80a08f2:	2110      	movs	r1, #16
 80a08f4:	4628      	mov	r0, r5
 80a08f6:	f000 ffd8 	bl	80a18aa <_ZdlPvj>
 80a08fa:	4620      	mov	r0, r4
 80a08fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0900:	2114      	movs	r1, #20
 80a0902:	f000 bfd2 	b.w	80a18aa <_ZdlPvj>
 80a0906:	bd38      	pop	{r3, r4, r5, pc}

080a0908 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a0908:	b513      	push	{r0, r1, r4, lr}
 80a090a:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a090c:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a0910:	2300      	movs	r3, #0
 80a0912:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0914:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0916:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a0918:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a091a:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a091c:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a091e:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0920:	f7ff fc1e 	bl	80a0160 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0924:	4620      	mov	r0, r4
 80a0926:	b002      	add	sp, #8
 80a0928:	bd10      	pop	{r4, pc}

080a092a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a092a:	680b      	ldr	r3, [r1, #0]
 80a092c:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a092e:	b113      	cbz	r3, 80a0936 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a0930:	685a      	ldr	r2, [r3, #4]
 80a0932:	3201      	adds	r2, #1
 80a0934:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a0936:	4770      	bx	lr

080a0938 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a0938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a093a:	460c      	mov	r4, r1
 80a093c:	4606      	mov	r6, r0
 80a093e:	460f      	mov	r7, r1
 80a0940:	f854 3b04 	ldr.w	r3, [r4], #4
 80a0944:	ad02      	add	r5, sp, #8
 80a0946:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a094a:	4621      	mov	r1, r4
 80a094c:	a801      	add	r0, sp, #4
 80a094e:	f7ff ffec 	bl	80a092a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a0952:	4629      	mov	r1, r5
 80a0954:	4630      	mov	r0, r6
 80a0956:	f7ff ffd7 	bl	80a0908 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a095a:	a801      	add	r0, sp, #4
 80a095c:	f7ff fc00 	bl	80a0160 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0960:	4620      	mov	r0, r4
 80a0962:	f7ff fbfd 	bl	80a0160 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a0966:	4638      	mov	r0, r7
 80a0968:	2108      	movs	r1, #8
 80a096a:	f000 ff9e 	bl	80a18aa <_ZdlPvj>
        return p;
    }
 80a096e:	4630      	mov	r0, r6
 80a0970:	b003      	add	sp, #12
 80a0972:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0974 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a0974:	b513      	push	{r0, r1, r4, lr}
 80a0976:	460b      	mov	r3, r1
 80a0978:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a097a:	c803      	ldmia	r0, {r0, r1}
 80a097c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0980:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0984:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0988:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a098c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a0990:	b002      	add	sp, #8
 80a0992:	bd10      	pop	{r4, pc}

080a0994 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0994:	b538      	push	{r3, r4, r5, lr}
 80a0996:	2300      	movs	r3, #0
 80a0998:	4604      	mov	r4, r0
 80a099a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a099c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a099e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a09a0:	f7ff fb7d 	bl	80a009e <_Znwj>
 80a09a4:	b128      	cbz	r0, 80a09b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a09a6:	2301      	movs	r3, #1
 80a09a8:	6043      	str	r3, [r0, #4]
 80a09aa:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a09ac:	4b02      	ldr	r3, [pc, #8]	; (80a09b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a09ae:	60c5      	str	r5, [r0, #12]
 80a09b0:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a09b2:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a09b4:	4620      	mov	r0, r4
 80a09b6:	bd38      	pop	{r3, r4, r5, pc}
 80a09b8:	080a2a18 	.word	0x080a2a18

080a09bc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a09bc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a09be:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a09c0:	b90a      	cbnz	r2, 80a09c6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a09c2:	f000 ff74 	bl	80a18ae <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a09c6:	68c3      	ldr	r3, [r0, #12]
    }
 80a09c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a09cc:	4718      	bx	r3

080a09ce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a09ce:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a09d0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a09d2:	f100 0110 	add.w	r1, r0, #16
 80a09d6:	f7ff fff1 	bl	80a09bc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a09da:	bd08      	pop	{r3, pc}

080a09dc <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a09dc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a09de:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a09e0:	b90a      	cbnz	r2, 80a09e6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a09e2:	f000 ff64 	bl	80a18ae <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a09e6:	68c3      	ldr	r3, [r0, #12]
    }
 80a09e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a09ec:	4718      	bx	r3

080a09ee <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a09ee:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a09f0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a09f2:	f100 0110 	add.w	r1, r0, #16
 80a09f6:	f7ff fff1 	bl	80a09dc <_ZNKSt8functionIFvRKbEEclES1_>
 80a09fa:	bd08      	pop	{r3, pc}

080a09fc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a09fc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a09fe:	2300      	movs	r3, #0
 80a0a00:	6083      	str	r3, [r0, #8]
 80a0a02:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0a04:	4604      	mov	r4, r0
 80a0a06:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0a08:	b12b      	cbz	r3, 80a0a16 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0a0a:	2202      	movs	r2, #2
 80a0a0c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0a0e:	68eb      	ldr	r3, [r5, #12]
 80a0a10:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0a12:	68ab      	ldr	r3, [r5, #8]
 80a0a14:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0a16:	4620      	mov	r0, r4
 80a0a18:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0a1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a0a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0a1e:	b089      	sub	sp, #36	; 0x24
 80a0a20:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a0a22:	4668      	mov	r0, sp
 80a0a24:	f7ff ff37 	bl	80a0896 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a0a28:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a0a2c:	2300      	movs	r3, #0
 80a0a2e:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0a32:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a0a36:	2b00      	cmp	r3, #0
 80a0a38:	d103      	bne.n	80a0a42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a0a3a:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a0a3e:	2900      	cmp	r1, #0
 80a0a40:	d1f7      	bne.n	80a0a32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a0a42:	d002      	beq.n	80a0a4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a0a44:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0a48:	e063      	b.n	80a0b12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a0a4a:	f114 050c 	adds.w	r5, r4, #12
 80a0a4e:	d003      	beq.n	80a0a58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a0a50:	4669      	mov	r1, sp
 80a0a52:	4628      	mov	r0, r5
 80a0a54:	f7ff ff1f 	bl	80a0896 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a0a58:	f3bf 8f5f 	dmb	sy
 80a0a5c:	2301      	movs	r3, #1
 80a0a5e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a0a60:	f3bf 8f5f 	dmb	sy
 80a0a64:	f104 0308 	add.w	r3, r4, #8
 80a0a68:	2000      	movs	r0, #0
 80a0a6a:	e853 6f00 	ldrex	r6, [r3]
 80a0a6e:	e843 0200 	strex	r2, r0, [r3]
 80a0a72:	2a00      	cmp	r2, #0
 80a0a74:	d1f9      	bne.n	80a0a6a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a0a76:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a0a7a:	2e00      	cmp	r6, #0
 80a0a7c:	d049      	beq.n	80a0b12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a0a7e:	f7ff fdeb 	bl	80a0658 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a0a82:	b120      	cbz	r0, 80a0a8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0a84:	4629      	mov	r1, r5
 80a0a86:	4630      	mov	r0, r6
 80a0a88:	f7ff ff98 	bl	80a09bc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0a8c:	e03a      	b.n	80a0b04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0a8e:	4631      	mov	r1, r6
 80a0a90:	a802      	add	r0, sp, #8
 80a0a92:	f7ff ffb3 	bl	80a09fc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a0a96:	68e0      	ldr	r0, [r4, #12]
 80a0a98:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0a9c:	b108      	cbz	r0, 80a0aa2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a0a9e:	f001 fee7 	bl	80a2870 <strdup>
 80a0aa2:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0aa4:	2010      	movs	r0, #16
 80a0aa6:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a0aaa:	f7ff faf8 	bl	80a009e <_Znwj>
 80a0aae:	4605      	mov	r5, r0
 80a0ab0:	b1e8      	cbz	r0, 80a0aee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0ab2:	2700      	movs	r7, #0
 80a0ab4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0ab6:	2018      	movs	r0, #24
 80a0ab8:	f7ff faf1 	bl	80a009e <_Znwj>
 80a0abc:	4604      	mov	r4, r0
 80a0abe:	b188      	cbz	r0, 80a0ae4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0ac0:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0ac2:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0ac4:	a802      	add	r0, sp, #8
 80a0ac6:	f7ff ff55 	bl	80a0974 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0aca:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a0acc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0ace:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0ad0:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0ad2:	9204      	str	r2, [sp, #16]
 80a0ad4:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0ad6:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a0ad8:	60e3      	str	r3, [r4, #12]
 80a0ada:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0ade:	9205      	str	r2, [sp, #20]
 80a0ae0:	f7ff fed9 	bl	80a0896 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0ae4:	4b0d      	ldr	r3, [pc, #52]	; (80a0b1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0ae6:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0ae8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0aea:	4b0d      	ldr	r3, [pc, #52]	; (80a0b20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a0aec:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a0aee:	a806      	add	r0, sp, #24
 80a0af0:	f7ff fee0 	bl	80a08b4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0af4:	a802      	add	r0, sp, #8
 80a0af6:	f7ff fec5 	bl	80a0884 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0afa:	2200      	movs	r2, #0
 80a0afc:	4629      	mov	r1, r5
 80a0afe:	4809      	ldr	r0, [pc, #36]	; (80a0b24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a0b00:	f7ff fdb2 	bl	80a0668 <application_thread_invoke>
 80a0b04:	4630      	mov	r0, r6
 80a0b06:	f7ff febd 	bl	80a0884 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a0b0a:	2110      	movs	r1, #16
 80a0b0c:	4630      	mov	r0, r6
 80a0b0e:	f000 fecc 	bl	80a18aa <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a0b12:	4668      	mov	r0, sp
 80a0b14:	f7ff fece 	bl	80a08b4 <_ZN8particle5ErrorD1Ev>
    }
 80a0b18:	b009      	add	sp, #36	; 0x24
 80a0b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0b1c:	080a09cf 	.word	0x080a09cf
 80a0b20:	080a0c45 	.word	0x080a0c45
 80a0b24:	080a083f 	.word	0x080a083f

080a0b28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0b2c:	b08b      	sub	sp, #44	; 0x2c
 80a0b2e:	4606      	mov	r6, r0
 80a0b30:	460f      	mov	r7, r1
 80a0b32:	4690      	mov	r8, r2
 80a0b34:	4699      	mov	r9, r3
 80a0b36:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0b3a:	f7ff fdb1 	bl	80a06a0 <spark_cloud_flag_connected>
 80a0b3e:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 80a0b40:	4683      	mov	fp, r0
 80a0b42:	bb30      	cbnz	r0, 80a0b92 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0b44:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a0b48:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0b4a:	a905      	add	r1, sp, #20
 80a0b4c:	4628      	mov	r0, r5
 80a0b4e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0b52:	f7ff fea0 	bl	80a0896 <_ZN8particle5ErrorC1EOS0_>
 80a0b56:	2014      	movs	r0, #20
 80a0b58:	f7ff faa1 	bl	80a009e <_Znwj>
 80a0b5c:	4604      	mov	r4, r0
 80a0b5e:	b158      	cbz	r0, 80a0b78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a0b60:	2302      	movs	r3, #2
 80a0b62:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0b64:	2301      	movs	r3, #1
 80a0b66:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0b68:	f8c0 b004 	str.w	fp, [r0, #4]
 80a0b6c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a0b70:	4629      	mov	r1, r5
 80a0b72:	300c      	adds	r0, #12
 80a0b74:	f7ff fe8f 	bl	80a0896 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a0b78:	4630      	mov	r0, r6
 80a0b7a:	4621      	mov	r1, r4
 80a0b7c:	f840 4b04 	str.w	r4, [r0], #4
 80a0b80:	f7ff ff08 	bl	80a0994 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0b84:	4628      	mov	r0, r5
 80a0b86:	f7ff fe95 	bl	80a08b4 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a0b8a:	a805      	add	r0, sp, #20
 80a0b8c:	f7ff fe92 	bl	80a08b4 <_ZN8particle5ErrorD1Ev>
 80a0b90:	e052      	b.n	80a0c38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a0b92:	2400      	movs	r4, #0
 80a0b94:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a0b96:	2014      	movs	r0, #20
 80a0b98:	606c      	str	r4, [r5, #4]
 80a0b9a:	60ac      	str	r4, [r5, #8]
 80a0b9c:	9307      	str	r3, [sp, #28]
 80a0b9e:	f7ff fa7e 	bl	80a009e <_Znwj>
 80a0ba2:	4601      	mov	r1, r0
 80a0ba4:	b118      	cbz	r0, 80a0bae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a0ba6:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0ba8:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0baa:	6044      	str	r4, [r0, #4]
 80a0bac:	6084      	str	r4, [r0, #8]
 80a0bae:	a804      	add	r0, sp, #16
 80a0bb0:	9103      	str	r1, [sp, #12]
 80a0bb2:	f7ff feef 	bl	80a0994 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a0bb6:	4b22      	ldr	r3, [pc, #136]	; (80a0c40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a0bb8:	2008      	movs	r0, #8
 80a0bba:	9308      	str	r3, [sp, #32]
 80a0bbc:	f7ff fa6f 	bl	80a009e <_Znwj>
 80a0bc0:	4604      	mov	r4, r0
 80a0bc2:	b128      	cbz	r0, 80a0bd0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0bc4:	9b03      	ldr	r3, [sp, #12]
 80a0bc6:	a904      	add	r1, sp, #16
 80a0bc8:	f840 3b04 	str.w	r3, [r0], #4
 80a0bcc:	f7ff fead 	bl	80a092a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0bd0:	9500      	str	r5, [sp, #0]
 80a0bd2:	fa5f f38a 	uxtb.w	r3, sl
 80a0bd6:	464a      	mov	r2, r9
 80a0bd8:	4641      	mov	r1, r8
 80a0bda:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a0bdc:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0bde:	f7ff fd67 	bl	80a06b0 <spark_send_event>
 80a0be2:	b920      	cbnz	r0, 80a0bee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a0be4:	9b03      	ldr	r3, [sp, #12]
 80a0be6:	785b      	ldrb	r3, [r3, #1]
 80a0be8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a0bec:	b183      	cbz	r3, 80a0c10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a0bee:	9b03      	ldr	r3, [sp, #12]
 80a0bf0:	a904      	add	r1, sp, #16
 80a0bf2:	a806      	add	r0, sp, #24
 80a0bf4:	9305      	str	r3, [sp, #20]
 80a0bf6:	f7ff fe98 	bl	80a092a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a0bfa:	a905      	add	r1, sp, #20
 80a0bfc:	4630      	mov	r0, r6
 80a0bfe:	f7ff fe83 	bl	80a0908 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0c02:	a806      	add	r0, sp, #24
 80a0c04:	f7ff faac 	bl	80a0160 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0c08:	a804      	add	r0, sp, #16
 80a0c0a:	f7ff faa9 	bl	80a0160 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0c0e:	e013      	b.n	80a0c38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a0c10:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a0c14:	a905      	add	r1, sp, #20
 80a0c16:	a803      	add	r0, sp, #12
 80a0c18:	9205      	str	r2, [sp, #20]
 80a0c1a:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0c1e:	f7ff fefd 	bl	80a0a1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a0c22:	a805      	add	r0, sp, #20
 80a0c24:	f7ff fe46 	bl	80a08b4 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a0c28:	a805      	add	r0, sp, #20
 80a0c2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0c2c:	f7ff fe84 	bl	80a0938 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a0c30:	a806      	add	r0, sp, #24
 80a0c32:	f7ff fa95 	bl	80a0160 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0c36:	e7da      	b.n	80a0bee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a0c38:	4630      	mov	r0, r6
 80a0c3a:	b00b      	add	sp, #44	; 0x2c
 80a0c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0c40:	080a0db5 	.word	0x080a0db5

080a0c44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0c44:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0c48:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0c4a:	d006      	beq.n	80a0c5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a0c4c:	2a03      	cmp	r2, #3
 80a0c4e:	d017      	beq.n	80a0c80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a0c50:	2a01      	cmp	r2, #1
 80a0c52:	d122      	bne.n	80a0c9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0c54:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0c56:	6003      	str	r3, [r0, #0]
	      break;
 80a0c58:	e01f      	b.n	80a0c9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0c5a:	2018      	movs	r0, #24
 80a0c5c:	680e      	ldr	r6, [r1, #0]
 80a0c5e:	f7ff fa1e 	bl	80a009e <_Znwj>
 80a0c62:	4605      	mov	r5, r0
 80a0c64:	b150      	cbz	r0, 80a0c7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a0c66:	4631      	mov	r1, r6
 80a0c68:	f7ff fec8 	bl	80a09fc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a0c6c:	6930      	ldr	r0, [r6, #16]
 80a0c6e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0c72:	b108      	cbz	r0, 80a0c78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a0c74:	f001 fdfc 	bl	80a2870 <strdup>
 80a0c78:	6128      	str	r0, [r5, #16]
 80a0c7a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0c7c:	6025      	str	r5, [r4, #0]
 80a0c7e:	e00c      	b.n	80a0c9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0c80:	6804      	ldr	r4, [r0, #0]
 80a0c82:	b154      	cbz	r4, 80a0c9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a0c84:	f104 0010 	add.w	r0, r4, #16
 80a0c88:	f7ff fe14 	bl	80a08b4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0c8c:	4620      	mov	r0, r4
 80a0c8e:	f7ff fdf9 	bl	80a0884 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0c92:	2118      	movs	r1, #24
 80a0c94:	4620      	mov	r0, r4
 80a0c96:	f000 fe08 	bl	80a18aa <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0c9a:	2000      	movs	r0, #0
 80a0c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0c9e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0c9e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0ca0:	2300      	movs	r3, #0
 80a0ca2:	6083      	str	r3, [r0, #8]
 80a0ca4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0ca6:	4604      	mov	r4, r0
 80a0ca8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0caa:	b12b      	cbz	r3, 80a0cb8 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0cac:	2202      	movs	r2, #2
 80a0cae:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0cb0:	68eb      	ldr	r3, [r5, #12]
 80a0cb2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0cb4:	68ab      	ldr	r3, [r5, #8]
 80a0cb6:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0cb8:	4620      	mov	r0, r4
 80a0cba:	bd38      	pop	{r3, r4, r5, pc}

080a0cbc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0cbc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0cbe:	b570      	push	{r4, r5, r6, lr}
 80a0cc0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0cc2:	d006      	beq.n	80a0cd2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a0cc4:	2a03      	cmp	r2, #3
 80a0cc6:	d011      	beq.n	80a0cec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a0cc8:	2a01      	cmp	r2, #1
 80a0cca:	d118      	bne.n	80a0cfe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0ccc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0cce:	6003      	str	r3, [r0, #0]
	      break;
 80a0cd0:	e015      	b.n	80a0cfe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0cd2:	2014      	movs	r0, #20
 80a0cd4:	680e      	ldr	r6, [r1, #0]
 80a0cd6:	f7ff f9e2 	bl	80a009e <_Znwj>
 80a0cda:	4605      	mov	r5, r0
 80a0cdc:	b120      	cbz	r0, 80a0ce8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a0cde:	4631      	mov	r1, r6
 80a0ce0:	f7ff ffdd 	bl	80a0c9e <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a0ce4:	7c33      	ldrb	r3, [r6, #16]
 80a0ce6:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0ce8:	6025      	str	r5, [r4, #0]
 80a0cea:	e008      	b.n	80a0cfe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0cec:	6804      	ldr	r4, [r0, #0]
 80a0cee:	b134      	cbz	r4, 80a0cfe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0cf0:	4620      	mov	r0, r4
 80a0cf2:	f7ff fdc7 	bl	80a0884 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0cf6:	2114      	movs	r1, #20
 80a0cf8:	4620      	mov	r0, r4
 80a0cfa:	f000 fdd6 	bl	80a18aa <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0cfe:	2000      	movs	r0, #0
 80a0d00:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0d04 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a0d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0d06:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a0d08:	f3bf 8f5f 	dmb	sy
 80a0d0c:	b087      	sub	sp, #28
 80a0d0e:	2300      	movs	r3, #0
 80a0d10:	e850 6f00 	ldrex	r6, [r0]
 80a0d14:	e840 3200 	strex	r2, r3, [r0]
 80a0d18:	2a00      	cmp	r2, #0
 80a0d1a:	d1f9      	bne.n	80a0d10 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a0d1c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a0d20:	2e00      	cmp	r6, #0
 80a0d22:	d03f      	beq.n	80a0da4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a0d24:	4618      	mov	r0, r3
 80a0d26:	f7ff fc97 	bl	80a0658 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a0d2a:	4607      	mov	r7, r0
 80a0d2c:	b120      	cbz	r0, 80a0d38 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0d2e:	4621      	mov	r1, r4
 80a0d30:	4630      	mov	r0, r6
 80a0d32:	f7ff fe53 	bl	80a09dc <_ZNKSt8functionIFvRKbEEclES1_>
 80a0d36:	e02e      	b.n	80a0d96 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0d38:	4631      	mov	r1, r6
 80a0d3a:	a801      	add	r0, sp, #4
 80a0d3c:	f7ff ffaf 	bl	80a0c9e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0d40:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0d42:	2010      	movs	r0, #16
 80a0d44:	f88d 3014 	strb.w	r3, [sp, #20]
 80a0d48:	f7ff f9a9 	bl	80a009e <_Znwj>
 80a0d4c:	4605      	mov	r5, r0
 80a0d4e:	b1d0      	cbz	r0, 80a0d86 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0d50:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0d52:	2014      	movs	r0, #20
 80a0d54:	f7ff f9a3 	bl	80a009e <_Znwj>
 80a0d58:	4604      	mov	r4, r0
 80a0d5a:	b178      	cbz	r0, 80a0d7c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0d5c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0d5e:	4601      	mov	r1, r0
 80a0d60:	a801      	add	r0, sp, #4
 80a0d62:	f7ff fe07 	bl	80a0974 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0d66:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a0d68:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d6a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0d6c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a0d6e:	9203      	str	r2, [sp, #12]
 80a0d70:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d72:	60e3      	str	r3, [r4, #12]
 80a0d74:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0d78:	9204      	str	r2, [sp, #16]
 80a0d7a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0d7c:	4b0a      	ldr	r3, [pc, #40]	; (80a0da8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0d7e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0d80:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0d82:	4b0a      	ldr	r3, [pc, #40]	; (80a0dac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a0d84:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0d86:	a801      	add	r0, sp, #4
 80a0d88:	f7ff fd7c 	bl	80a0884 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0d8c:	2200      	movs	r2, #0
 80a0d8e:	4629      	mov	r1, r5
 80a0d90:	4807      	ldr	r0, [pc, #28]	; (80a0db0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a0d92:	f7ff fc69 	bl	80a0668 <application_thread_invoke>
 80a0d96:	4630      	mov	r0, r6
 80a0d98:	f7ff fd74 	bl	80a0884 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a0d9c:	2110      	movs	r1, #16
 80a0d9e:	4630      	mov	r0, r6
 80a0da0:	f000 fd83 	bl	80a18aa <_ZdlPvj>
        }
    }
 80a0da4:	b007      	add	sp, #28
 80a0da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0da8:	080a09ef 	.word	0x080a09ef
 80a0dac:	080a0cbd 	.word	0x080a0cbd
 80a0db0:	080a083f 	.word	0x080a083f

080a0db4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a0db4:	b530      	push	{r4, r5, lr}
 80a0db6:	4604      	mov	r4, r0
 80a0db8:	b085      	sub	sp, #20
 80a0dba:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a0dbc:	4668      	mov	r0, sp
 80a0dbe:	4611      	mov	r1, r2
 80a0dc0:	f7ff fdba 	bl	80a0938 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a0dc4:	b17c      	cbz	r4, 80a0de6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a0dc6:	b224      	sxth	r4, r4
 80a0dc8:	4628      	mov	r0, r5
 80a0dca:	b10d      	cbz	r5, 80a0dd0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a0dcc:	f001 fd50 	bl	80a2870 <strdup>
 80a0dd0:	9002      	str	r0, [sp, #8]
 80a0dd2:	a902      	add	r1, sp, #8
 80a0dd4:	4668      	mov	r0, sp
 80a0dd6:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a0dda:	f7ff fe1f 	bl	80a0a1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a0dde:	a802      	add	r0, sp, #8
 80a0de0:	f7ff fd68 	bl	80a08b4 <_ZN8particle5ErrorD1Ev>
 80a0de4:	e01d      	b.n	80a0e22 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a0de6:	f04f 0201 	mov.w	r2, #1
 80a0dea:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a0dec:	f88d 4008 	strb.w	r4, [sp, #8]
 80a0df0:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a0df4:	42a3      	cmp	r3, r4
 80a0df6:	d103      	bne.n	80a0e00 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a0df8:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a0dfc:	2900      	cmp	r1, #0
 80a0dfe:	d1f7      	bne.n	80a0df0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a0e00:	d002      	beq.n	80a0e08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a0e02:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0e06:	e00c      	b.n	80a0e22 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a0e08:	f110 010c 	adds.w	r1, r0, #12
 80a0e0c:	f04f 0301 	mov.w	r3, #1
 80a0e10:	bf18      	it	ne
 80a0e12:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a0e14:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a0e18:	3004      	adds	r0, #4
 80a0e1a:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a0e1e:	f7ff ff71 	bl	80a0d04 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a0e22:	a801      	add	r0, sp, #4
 80a0e24:	f7ff f99c 	bl	80a0160 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a0e28:	b005      	add	sp, #20
 80a0e2a:	bd30      	pop	{r4, r5, pc}

080a0e2c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0e2c:	4770      	bx	lr

080a0e2e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0e30:	4606      	mov	r6, r0
 80a0e32:	4615      	mov	r5, r2
 80a0e34:	460c      	mov	r4, r1
 80a0e36:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0e38:	42bc      	cmp	r4, r7
 80a0e3a:	d006      	beq.n	80a0e4a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0e3c:	6833      	ldr	r3, [r6, #0]
 80a0e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0e42:	689b      	ldr	r3, [r3, #8]
 80a0e44:	4630      	mov	r0, r6
 80a0e46:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0e48:	e7f6      	b.n	80a0e38 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0e4a:	4628      	mov	r0, r5
 80a0e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0e4e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0e4e:	2200      	movs	r2, #0
 80a0e50:	7c00      	ldrb	r0, [r0, #16]
 80a0e52:	f7ff bb2f 	b.w	80a04b4 <HAL_I2C_Write_Data>

080a0e56 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0e56:	2100      	movs	r1, #0
 80a0e58:	7c00      	ldrb	r0, [r0, #16]
 80a0e5a:	f7ff bb33 	b.w	80a04c4 <HAL_I2C_Available_Data>

080a0e5e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0e5e:	2100      	movs	r1, #0
 80a0e60:	7c00      	ldrb	r0, [r0, #16]
 80a0e62:	f7ff bb37 	b.w	80a04d4 <HAL_I2C_Read_Data>

080a0e66 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0e66:	2100      	movs	r1, #0
 80a0e68:	7c00      	ldrb	r0, [r0, #16]
 80a0e6a:	f7ff bb3b 	b.w	80a04e4 <HAL_I2C_Peek_Data>

080a0e6e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0e6e:	2100      	movs	r1, #0
 80a0e70:	7c00      	ldrb	r0, [r0, #16]
 80a0e72:	f7ff bb3f 	b.w	80a04f4 <HAL_I2C_Flush_Data>

080a0e76 <_ZN7TwoWireD0Ev>:
 80a0e76:	b510      	push	{r4, lr}
 80a0e78:	4604      	mov	r4, r0
 80a0e7a:	2114      	movs	r1, #20
 80a0e7c:	f000 fd15 	bl	80a18aa <_ZdlPvj>
 80a0e80:	4620      	mov	r0, r4
 80a0e82:	bd10      	pop	{r4, pc}

080a0e84 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0e84:	b510      	push	{r4, lr}
 80a0e86:	4604      	mov	r4, r0
 80a0e88:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0e8e:	60a3      	str	r3, [r4, #8]
 80a0e90:	4b04      	ldr	r3, [pc, #16]	; (80a0ea4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0e92:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a0e94:	7420      	strb	r0, [r4, #16]
 80a0e96:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0e98:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a0e9a:	f7ff fb3b 	bl	80a0514 <HAL_I2C_Init>

}
 80a0e9e:	4620      	mov	r0, r4
 80a0ea0:	bd10      	pop	{r4, pc}
 80a0ea2:	bf00      	nop
 80a0ea4:	080a2a34 	.word	0x080a2a34

080a0ea8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0ea8:	2100      	movs	r1, #0
 80a0eaa:	7c00      	ldrb	r0, [r0, #16]
 80a0eac:	f7ff bb2a 	b.w	80a0504 <HAL_I2C_Is_Enabled>

080a0eb0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0eb0:	4770      	bx	lr

080a0eb2 <_ZN9IPAddressD0Ev>:
 80a0eb2:	b510      	push	{r4, lr}
 80a0eb4:	4604      	mov	r4, r0
 80a0eb6:	2118      	movs	r1, #24
 80a0eb8:	f000 fcf7 	bl	80a18aa <_ZdlPvj>
 80a0ebc:	4620      	mov	r0, r4
 80a0ebe:	bd10      	pop	{r4, pc}

080a0ec0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0ec2:	460f      	mov	r7, r1
 80a0ec4:	f100 0608 	add.w	r6, r0, #8
 80a0ec8:	1d05      	adds	r5, r0, #4
 80a0eca:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0ecc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0ed0:	220a      	movs	r2, #10
 80a0ed2:	4638      	mov	r0, r7
 80a0ed4:	f000 f911 	bl	80a10fa <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0ed8:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0eda:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0edc:	d007      	beq.n	80a0eee <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0ede:	2c00      	cmp	r4, #0
 80a0ee0:	d0f4      	beq.n	80a0ecc <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0ee2:	212e      	movs	r1, #46	; 0x2e
 80a0ee4:	4638      	mov	r0, r7
 80a0ee6:	f000 f8db 	bl	80a10a0 <_ZN5Print5printEc>
 80a0eea:	4404      	add	r4, r0
 80a0eec:	e7ee      	b.n	80a0ecc <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0eee:	4620      	mov	r0, r4
 80a0ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0ef4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0ef4:	b510      	push	{r4, lr}
 80a0ef6:	4604      	mov	r4, r0
 80a0ef8:	4b04      	ldr	r3, [pc, #16]	; (80a0f0c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0efa:	2211      	movs	r2, #17
 80a0efc:	f840 3b04 	str.w	r3, [r0], #4
 80a0f00:	2100      	movs	r1, #0
 80a0f02:	f001 fc84 	bl	80a280e <memset>
{
    clear();
}
 80a0f06:	4620      	mov	r0, r4
 80a0f08:	bd10      	pop	{r4, pc}
 80a0f0a:	bf00      	nop
 80a0f0c:	080a2a5c 	.word	0x080a2a5c

080a0f10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0f10:	4603      	mov	r3, r0
 80a0f12:	4a07      	ldr	r2, [pc, #28]	; (80a0f30 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0f14:	b510      	push	{r4, lr}
 80a0f16:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0f1a:	f101 0210 	add.w	r2, r1, #16
 80a0f1e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0f22:	4291      	cmp	r1, r2
 80a0f24:	f843 4b04 	str.w	r4, [r3], #4
 80a0f28:	d1f9      	bne.n	80a0f1e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0f2a:	780a      	ldrb	r2, [r1, #0]
 80a0f2c:	701a      	strb	r2, [r3, #0]
}
 80a0f2e:	bd10      	pop	{r4, pc}
 80a0f30:	080a2a5c 	.word	0x080a2a5c

080a0f34 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0f34:	4a02      	ldr	r2, [pc, #8]	; (80a0f40 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0f36:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0f38:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0f3a:	2204      	movs	r2, #4
 80a0f3c:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a0f3e:	4770      	bx	lr
 80a0f40:	080a2a5c 	.word	0x080a2a5c

080a0f44 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0f44:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0f46:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0f4a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0f4e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0f52:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0f56:	2304      	movs	r3, #4
 80a0f58:	6041      	str	r1, [r0, #4]
 80a0f5a:	7503      	strb	r3, [r0, #20]
 80a0f5c:	bd10      	pop	{r4, pc}
	...

080a0f60 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0f62:	4d04      	ldr	r5, [pc, #16]	; (80a0f74 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0f64:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0f66:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0f6a:	9500      	str	r5, [sp, #0]
 80a0f6c:	f7ff ffea 	bl	80a0f44 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0f70:	b003      	add	sp, #12
 80a0f72:	bd30      	pop	{r4, r5, pc}
 80a0f74:	080a2a5c 	.word	0x080a2a5c

080a0f78 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0f78:	4a01      	ldr	r2, [pc, #4]	; (80a0f80 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0f7a:	4b02      	ldr	r3, [pc, #8]	; (80a0f84 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0f7c:	601a      	str	r2, [r3, #0]
 80a0f7e:	4770      	bx	lr
 80a0f80:	080a2ade 	.word	0x080a2ade
 80a0f84:	200001b8 	.word	0x200001b8

080a0f88 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0f88:	2300      	movs	r3, #0
 80a0f8a:	461a      	mov	r2, r3
 80a0f8c:	6840      	ldr	r0, [r0, #4]
 80a0f8e:	f7ff bb9f 	b.w	80a06d0 <network_connect>

080a0f92 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0f92:	2200      	movs	r2, #0
 80a0f94:	2102      	movs	r1, #2
 80a0f96:	6840      	ldr	r0, [r0, #4]
 80a0f98:	f7ff bbaa 	b.w	80a06f0 <network_disconnect>

080a0f9c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0f9c:	2200      	movs	r2, #0
 80a0f9e:	4611      	mov	r1, r2
 80a0fa0:	6840      	ldr	r0, [r0, #4]
 80a0fa2:	f7ff bb9d 	b.w	80a06e0 <network_connecting>

080a0fa6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0fa6:	2200      	movs	r2, #0
 80a0fa8:	4611      	mov	r1, r2
 80a0faa:	6840      	ldr	r0, [r0, #4]
 80a0fac:	f7ff bba8 	b.w	80a0700 <network_ready>

080a0fb0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0fb0:	2300      	movs	r3, #0
 80a0fb2:	461a      	mov	r2, r3
 80a0fb4:	4619      	mov	r1, r3
 80a0fb6:	6840      	ldr	r0, [r0, #4]
 80a0fb8:	f7ff bbaa 	b.w	80a0710 <network_on>

080a0fbc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0fbc:	2300      	movs	r3, #0
 80a0fbe:	461a      	mov	r2, r3
 80a0fc0:	4619      	mov	r1, r3
 80a0fc2:	6840      	ldr	r0, [r0, #4]
 80a0fc4:	f7ff bbac 	b.w	80a0720 <network_off>

080a0fc8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0fc8:	2200      	movs	r2, #0
 80a0fca:	f081 0101 	eor.w	r1, r1, #1
 80a0fce:	6840      	ldr	r0, [r0, #4]
 80a0fd0:	f7ff bbae 	b.w	80a0730 <network_listen>

080a0fd4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0fd4:	2200      	movs	r2, #0
 80a0fd6:	6840      	ldr	r0, [r0, #4]
 80a0fd8:	f7ff bbba 	b.w	80a0750 <network_set_listen_timeout>

080a0fdc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0fdc:	2200      	movs	r2, #0
 80a0fde:	4611      	mov	r1, r2
 80a0fe0:	6840      	ldr	r0, [r0, #4]
 80a0fe2:	f7ff bbbd 	b.w	80a0760 <network_get_listen_timeout>

080a0fe6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0fe6:	2200      	movs	r2, #0
 80a0fe8:	4611      	mov	r1, r2
 80a0fea:	6840      	ldr	r0, [r0, #4]
 80a0fec:	f7ff bba8 	b.w	80a0740 <network_listening>

080a0ff0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0ff0:	b570      	push	{r4, r5, r6, lr}
 80a0ff2:	4616      	mov	r6, r2
 80a0ff4:	b08e      	sub	sp, #56	; 0x38
 80a0ff6:	4604      	mov	r4, r0
    IPAddress addr;
 80a0ff8:	a808      	add	r0, sp, #32
 80a0ffa:	f7ff ff7b 	bl	80a0ef4 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0ffe:	2211      	movs	r2, #17
 80a1000:	2100      	movs	r1, #0
 80a1002:	a803      	add	r0, sp, #12
 80a1004:	f001 fc03 	bl	80a280e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1008:	4630      	mov	r0, r6
 80a100a:	f001 fc4c 	bl	80a28a6 <strlen>
 80a100e:	2500      	movs	r5, #0
 80a1010:	4b0a      	ldr	r3, [pc, #40]	; (80a103c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1012:	9500      	str	r5, [sp, #0]
 80a1014:	b281      	uxth	r1, r0
 80a1016:	685b      	ldr	r3, [r3, #4]
 80a1018:	aa03      	add	r2, sp, #12
 80a101a:	4630      	mov	r0, r6
 80a101c:	f7ff fb04 	bl	80a0628 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1020:	b120      	cbz	r0, 80a102c <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a1022:	4629      	mov	r1, r5
 80a1024:	4620      	mov	r0, r4
 80a1026:	f7ff ff85 	bl	80a0f34 <_ZN9IPAddressC1Em>
 80a102a:	e003      	b.n	80a1034 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a102c:	a903      	add	r1, sp, #12
 80a102e:	4620      	mov	r0, r4
 80a1030:	f7ff ff6e 	bl	80a0f10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1034:	4620      	mov	r0, r4
 80a1036:	b00e      	add	sp, #56	; 0x38
 80a1038:	bd70      	pop	{r4, r5, r6, pc}
 80a103a:	bf00      	nop
 80a103c:	20000230 	.word	0x20000230

080a1040 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1040:	4b02      	ldr	r3, [pc, #8]	; (80a104c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1042:	4a03      	ldr	r2, [pc, #12]	; (80a1050 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1044:	601a      	str	r2, [r3, #0]
 80a1046:	2200      	movs	r2, #0
 80a1048:	605a      	str	r2, [r3, #4]
 80a104a:	4770      	bx	lr
 80a104c:	200001bc 	.word	0x200001bc
 80a1050:	080a2b54 	.word	0x080a2b54

080a1054 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1056:	4606      	mov	r6, r0
 80a1058:	460d      	mov	r5, r1
 80a105a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a105c:	2400      	movs	r4, #0
  while (size--) {
 80a105e:	42bd      	cmp	r5, r7
 80a1060:	d00c      	beq.n	80a107c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1062:	6833      	ldr	r3, [r6, #0]
 80a1064:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1068:	689b      	ldr	r3, [r3, #8]
 80a106a:	4630      	mov	r0, r6
 80a106c:	4798      	blx	r3
     if (chunk>=0)
 80a106e:	2800      	cmp	r0, #0
 80a1070:	db01      	blt.n	80a1076 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1072:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1074:	e7f3      	b.n	80a105e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1076:	2c00      	cmp	r4, #0
 80a1078:	bf08      	it	eq
 80a107a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a107c:	4620      	mov	r0, r4
 80a107e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1080 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1080:	b570      	push	{r4, r5, r6, lr}
 80a1082:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1084:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1086:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1088:	b149      	cbz	r1, 80a109e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a108a:	f001 fc0c 	bl	80a28a6 <strlen>
 80a108e:	682b      	ldr	r3, [r5, #0]
 80a1090:	4602      	mov	r2, r0
 80a1092:	4621      	mov	r1, r4
 80a1094:	4628      	mov	r0, r5
    }
 80a1096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a109a:	68db      	ldr	r3, [r3, #12]
 80a109c:	4718      	bx	r3
    }
 80a109e:	bd70      	pop	{r4, r5, r6, pc}

080a10a0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a10a0:	6803      	ldr	r3, [r0, #0]
 80a10a2:	689b      	ldr	r3, [r3, #8]
 80a10a4:	4718      	bx	r3

080a10a6 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a10a6:	2a01      	cmp	r2, #1
 80a10a8:	bf98      	it	ls
 80a10aa:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a10ac:	b530      	push	{r4, r5, lr}
 80a10ae:	460b      	mov	r3, r1
 80a10b0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a10b2:	2100      	movs	r1, #0
 80a10b4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a10b8:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a10bc:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a10c0:	fb05 3312 	mls	r3, r5, r2, r3
 80a10c4:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a10c6:	2b09      	cmp	r3, #9
 80a10c8:	bf94      	ite	ls
 80a10ca:	3330      	addls	r3, #48	; 0x30
 80a10cc:	3337      	addhi	r3, #55	; 0x37
 80a10ce:	b2db      	uxtb	r3, r3
 80a10d0:	4621      	mov	r1, r4
 80a10d2:	f804 3901 	strb.w	r3, [r4], #-1
 80a10d6:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a10d8:	2d00      	cmp	r5, #0
 80a10da:	d1ef      	bne.n	80a10bc <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a10dc:	f7ff ffd0 	bl	80a1080 <_ZN5Print5writeEPKc>
}
 80a10e0:	b00b      	add	sp, #44	; 0x2c
 80a10e2:	bd30      	pop	{r4, r5, pc}

080a10e4 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a10e4:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a10e6:	b922      	cbnz	r2, 80a10f2 <_ZN5Print5printEmi+0xe>
 80a10e8:	6803      	ldr	r3, [r0, #0]
 80a10ea:	b2c9      	uxtb	r1, r1
 80a10ec:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a10ee:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a10f0:	4718      	bx	r3
  else return printNumber(n, base);
 80a10f2:	b2d2      	uxtb	r2, r2
}
 80a10f4:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a10f6:	f7ff bfd6 	b.w	80a10a6 <_ZN5Print11printNumberEmh>

080a10fa <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a10fa:	f7ff bff3 	b.w	80a10e4 <_ZN5Print5printEmi>

080a10fe <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a10fe:	b510      	push	{r4, lr}
 80a1100:	4604      	mov	r4, r0
 80a1102:	f7ff fbbf 	bl	80a0884 <_ZNSt14_Function_baseD1Ev>
 80a1106:	4620      	mov	r0, r4
 80a1108:	bd10      	pop	{r4, pc}
	...

080a110c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a110c:	4803      	ldr	r0, [pc, #12]	; (80a111c <_GLOBAL__sub_I_RGB+0x10>)
 80a110e:	2300      	movs	r3, #0
 80a1110:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1112:	4a03      	ldr	r2, [pc, #12]	; (80a1120 <_GLOBAL__sub_I_RGB+0x14>)
 80a1114:	4903      	ldr	r1, [pc, #12]	; (80a1124 <_GLOBAL__sub_I_RGB+0x18>)
 80a1116:	f000 bbc3 	b.w	80a18a0 <__aeabi_atexit>
 80a111a:	bf00      	nop
 80a111c:	200001c4 	.word	0x200001c4
 80a1120:	20000084 	.word	0x20000084
 80a1124:	080a10ff 	.word	0x080a10ff

080a1128 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1128:	4770      	bx	lr

080a112a <_ZN8SPIClassD0Ev>:
 80a112a:	b510      	push	{r4, lr}
 80a112c:	4604      	mov	r4, r0
 80a112e:	2110      	movs	r1, #16
 80a1130:	f000 fbbb 	bl	80a18aa <_ZdlPvj>
 80a1134:	4620      	mov	r0, r4
 80a1136:	bd10      	pop	{r4, pc}

080a1138 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1138:	b570      	push	{r4, r5, r6, lr}
 80a113a:	4604      	mov	r4, r0
 80a113c:	460e      	mov	r6, r1
 80a113e:	4b07      	ldr	r3, [pc, #28]	; (80a115c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1140:	2500      	movs	r5, #0
 80a1142:	6003      	str	r3, [r0, #0]
 80a1144:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1148:	f7ff f96c 	bl	80a0424 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a114c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a114e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1150:	f7ff f9ea 	bl	80a0528 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1154:	60a5      	str	r5, [r4, #8]
}
 80a1156:	4620      	mov	r0, r4
 80a1158:	bd70      	pop	{r4, r5, r6, pc}
 80a115a:	bf00      	nop
 80a115c:	080a2b88 	.word	0x080a2b88

080a1160 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1160:	7900      	ldrb	r0, [r0, #4]
 80a1162:	f7ff b9e9 	b.w	80a0538 <HAL_SPI_Is_Enabled>

080a1166 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1166:	b510      	push	{r4, lr}
 80a1168:	4604      	mov	r4, r0
{
	free(buffer);
 80a116a:	6800      	ldr	r0, [r0, #0]
 80a116c:	f7ff fb08 	bl	80a0780 <free>
}
 80a1170:	4620      	mov	r0, r4
 80a1172:	bd10      	pop	{r4, pc}

080a1174 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1174:	b510      	push	{r4, lr}
 80a1176:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1178:	6800      	ldr	r0, [r0, #0]
 80a117a:	b108      	cbz	r0, 80a1180 <_ZN6String10invalidateEv+0xc>
 80a117c:	f7ff fb00 	bl	80a0780 <free>
	buffer = NULL;
 80a1180:	2300      	movs	r3, #0
 80a1182:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1184:	60a3      	str	r3, [r4, #8]
 80a1186:	6063      	str	r3, [r4, #4]
 80a1188:	bd10      	pop	{r4, pc}

080a118a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a118a:	b538      	push	{r3, r4, r5, lr}
 80a118c:	4604      	mov	r4, r0
 80a118e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1190:	6800      	ldr	r0, [r0, #0]
 80a1192:	3101      	adds	r1, #1
 80a1194:	f7ff fafc 	bl	80a0790 <realloc>
	if (newbuffer) {
 80a1198:	b110      	cbz	r0, 80a11a0 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a119a:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a119e:	2001      	movs	r0, #1
	}
	return 0;
}
 80a11a0:	bd38      	pop	{r3, r4, r5, pc}

080a11a2 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a11a2:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a11a4:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a11a6:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a11a8:	b113      	cbz	r3, 80a11b0 <_ZN6String7reserveEj+0xe>
 80a11aa:	6843      	ldr	r3, [r0, #4]
 80a11ac:	428b      	cmp	r3, r1
 80a11ae:	d207      	bcs.n	80a11c0 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a11b0:	4620      	mov	r0, r4
 80a11b2:	f7ff ffea 	bl	80a118a <_ZN6String12changeBufferEj>
 80a11b6:	b120      	cbz	r0, 80a11c2 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a11b8:	68a3      	ldr	r3, [r4, #8]
 80a11ba:	b90b      	cbnz	r3, 80a11c0 <_ZN6String7reserveEj+0x1e>
 80a11bc:	6822      	ldr	r2, [r4, #0]
 80a11be:	7013      	strb	r3, [r2, #0]
 80a11c0:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a11c2:	bd10      	pop	{r4, pc}

080a11c4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a11c4:	b570      	push	{r4, r5, r6, lr}
 80a11c6:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a11c8:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a11ca:	4604      	mov	r4, r0
 80a11cc:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a11ce:	f7ff ffe8 	bl	80a11a2 <_ZN6String7reserveEj>
 80a11d2:	b918      	cbnz	r0, 80a11dc <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a11d4:	4620      	mov	r0, r4
 80a11d6:	f7ff ffcd 	bl	80a1174 <_ZN6String10invalidateEv>
		return *this;
 80a11da:	e009      	b.n	80a11f0 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a11dc:	462a      	mov	r2, r5
 80a11de:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a11e0:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a11e2:	6820      	ldr	r0, [r4, #0]
 80a11e4:	f001 fb08 	bl	80a27f8 <memcpy>
	buffer[len] = 0;
 80a11e8:	6822      	ldr	r2, [r4, #0]
 80a11ea:	68a3      	ldr	r3, [r4, #8]
 80a11ec:	2100      	movs	r1, #0
 80a11ee:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a11f0:	4620      	mov	r0, r4
 80a11f2:	bd70      	pop	{r4, r5, r6, pc}

080a11f4 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a11f4:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a11f6:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a11f8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a11fa:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a11fc:	6043      	str	r3, [r0, #4]
	len = 0;
 80a11fe:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1200:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1202:	460d      	mov	r5, r1
 80a1204:	b139      	cbz	r1, 80a1216 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1206:	4608      	mov	r0, r1
 80a1208:	f001 fb4d 	bl	80a28a6 <strlen>
 80a120c:	4629      	mov	r1, r5
 80a120e:	4602      	mov	r2, r0
 80a1210:	4620      	mov	r0, r4
 80a1212:	f7ff ffd7 	bl	80a11c4 <_ZN6String4copyEPKcj>
}
 80a1216:	4620      	mov	r0, r4
 80a1218:	bd38      	pop	{r3, r4, r5, pc}
	...

080a121c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 80a121c:	b40e      	push	{r1, r2, r3}
 80a121e:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 80a1220:	ac09      	add	r4, sp, #36	; 0x24
 80a1222:	f854 7b04 	ldr.w	r7, [r4], #4
 80a1226:	4605      	mov	r5, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a1228:	4623      	mov	r3, r4
 80a122a:	463a      	mov	r2, r7
 80a122c:	2105      	movs	r1, #5
 80a122e:	a802      	add	r0, sp, #8
}

String String::format(const char* fmt, ...)
{
    va_list marker;
    va_start(marker, fmt);
 80a1230:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a1232:	f7ff fab5 	bl	80a07a0 <vsnprintf>
 80a1236:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 80a1238:	490b      	ldr	r1, [pc, #44]	; (80a1268 <_ZN6String6formatEPKcz+0x4c>)
 80a123a:	4628      	mov	r0, r5
 80a123c:	f7ff ffda 	bl	80a11f4 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 80a1240:	4631      	mov	r1, r6
 80a1242:	4628      	mov	r0, r5
 80a1244:	f7ff ffad 	bl	80a11a2 <_ZN6String7reserveEj>
    if (result.buffer) {
 80a1248:	6828      	ldr	r0, [r5, #0]
 80a124a:	b130      	cbz	r0, 80a125a <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a124c:	4623      	mov	r3, r4
 80a124e:	463a      	mov	r2, r7
 80a1250:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
 80a1252:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a1254:	f7ff faa4 	bl	80a07a0 <vsnprintf>
        va_end(marker);
        result.len = n;
 80a1258:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
 80a125a:	4628      	mov	r0, r5
 80a125c:	b004      	add	sp, #16
 80a125e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80a1262:	b003      	add	sp, #12
 80a1264:	4770      	bx	lr
 80a1266:	bf00      	nop
 80a1268:	080a2b12 	.word	0x080a2b12

080a126c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a126c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1270:	4b03      	ldr	r3, [pc, #12]	; (80a1280 <_GLOBAL__sub_I_System+0x14>)
 80a1272:	2000      	movs	r0, #0
 80a1274:	7018      	strb	r0, [r3, #0]
 80a1276:	8058      	strh	r0, [r3, #2]
 80a1278:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a127a:	f7ff b9dd 	b.w	80a0638 <set_system_mode>
 80a127e:	bf00      	nop
 80a1280:	200001d4 	.word	0x200001d4

080a1284 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1284:	4b02      	ldr	r3, [pc, #8]	; (80a1290 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1286:	681a      	ldr	r2, [r3, #0]
 80a1288:	4b02      	ldr	r3, [pc, #8]	; (80a1294 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a128a:	601a      	str	r2, [r3, #0]
 80a128c:	4770      	bx	lr
 80a128e:	bf00      	nop
 80a1290:	2000001c 	.word	0x2000001c
 80a1294:	200001dc 	.word	0x200001dc

080a1298 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1298:	4770      	bx	lr

080a129a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a129a:	7441      	strb	r1, [r0, #17]
 80a129c:	4770      	bx	lr

080a129e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a129e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a12a0:	7c00      	ldrb	r0, [r0, #16]
 80a12a2:	f7ff f989 	bl	80a05b8 <HAL_USART_Available_Data_For_Write>
}
 80a12a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a12aa:	bd08      	pop	{r3, pc}

080a12ac <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a12ac:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a12ae:	7c00      	ldrb	r0, [r0, #16]
 80a12b0:	f7ff f95a 	bl	80a0568 <HAL_USART_Available_Data>
}
 80a12b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a12b8:	bd08      	pop	{r3, pc}

080a12ba <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a12ba:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a12bc:	7c00      	ldrb	r0, [r0, #16]
 80a12be:	f7ff f963 	bl	80a0588 <HAL_USART_Peek_Data>
}
 80a12c2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a12c6:	bf28      	it	cs
 80a12c8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a12cc:	bd08      	pop	{r3, pc}

080a12ce <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a12ce:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a12d0:	7c00      	ldrb	r0, [r0, #16]
 80a12d2:	f7ff f951 	bl	80a0578 <HAL_USART_Read_Data>
}
 80a12d6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a12da:	bf28      	it	cs
 80a12dc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a12e0:	bd08      	pop	{r3, pc}

080a12e2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a12e2:	7c00      	ldrb	r0, [r0, #16]
 80a12e4:	f7ff b958 	b.w	80a0598 <HAL_USART_Flush_Data>

080a12e8 <_ZN11USARTSerialD0Ev>:
 80a12e8:	b510      	push	{r4, lr}
 80a12ea:	4604      	mov	r4, r0
 80a12ec:	2114      	movs	r1, #20
 80a12ee:	f000 fadc 	bl	80a18aa <_ZdlPvj>
 80a12f2:	4620      	mov	r0, r4
 80a12f4:	bd10      	pop	{r4, pc}

080a12f6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a12f6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a12f8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a12fa:	4604      	mov	r4, r0
 80a12fc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a12fe:	b925      	cbnz	r5, 80a130a <_ZN11USARTSerial5writeEh+0x14>
 80a1300:	7c00      	ldrb	r0, [r0, #16]
 80a1302:	f7ff f959 	bl	80a05b8 <HAL_USART_Available_Data_For_Write>
 80a1306:	2800      	cmp	r0, #0
 80a1308:	dd05      	ble.n	80a1316 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a130a:	4631      	mov	r1, r6
 80a130c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a130e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1312:	f7ff b921 	b.w	80a0558 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1316:	4628      	mov	r0, r5
 80a1318:	bd70      	pop	{r4, r5, r6, pc}
	...

080a131c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a131c:	b510      	push	{r4, lr}
 80a131e:	4604      	mov	r4, r0
 80a1320:	4608      	mov	r0, r1
 80a1322:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1324:	2200      	movs	r2, #0
 80a1326:	6062      	str	r2, [r4, #4]
 80a1328:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a132c:	60a2      	str	r2, [r4, #8]
 80a132e:	4a05      	ldr	r2, [pc, #20]	; (80a1344 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1330:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1332:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1334:	2201      	movs	r2, #1
 80a1336:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1338:	461a      	mov	r2, r3
 80a133a:	f7ff f905 	bl	80a0548 <HAL_USART_Init>
}
 80a133e:	4620      	mov	r0, r4
 80a1340:	bd10      	pop	{r4, pc}
 80a1342:	bf00      	nop
 80a1344:	080a2bc4 	.word	0x080a2bc4

080a1348 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1348:	7c00      	ldrb	r0, [r0, #16]
 80a134a:	f7ff b92d 	b.w	80a05a8 <HAL_USART_Is_Enabled>
	...

080a1350 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a1352:	4c19      	ldr	r4, [pc, #100]	; (80a13b8 <_Z22__fetch_global_Serial1v+0x68>)
 80a1354:	6825      	ldr	r5, [r4, #0]
 80a1356:	b94d      	cbnz	r5, 80a136c <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a1358:	2084      	movs	r0, #132	; 0x84
 80a135a:	f7fe fea0 	bl	80a009e <_Znwj>
 80a135e:	4606      	mov	r6, r0
 80a1360:	b118      	cbz	r0, 80a136a <_Z22__fetch_global_Serial1v+0x1a>
 80a1362:	2284      	movs	r2, #132	; 0x84
 80a1364:	4629      	mov	r1, r5
 80a1366:	f001 fa52 	bl	80a280e <memset>
 80a136a:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a136c:	4d13      	ldr	r5, [pc, #76]	; (80a13bc <_Z22__fetch_global_Serial1v+0x6c>)
 80a136e:	682e      	ldr	r6, [r5, #0]
 80a1370:	b94e      	cbnz	r6, 80a1386 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a1372:	2084      	movs	r0, #132	; 0x84
 80a1374:	f7fe fe93 	bl	80a009e <_Znwj>
 80a1378:	4607      	mov	r7, r0
 80a137a:	b118      	cbz	r0, 80a1384 <_Z22__fetch_global_Serial1v+0x34>
 80a137c:	2284      	movs	r2, #132	; 0x84
 80a137e:	4631      	mov	r1, r6
 80a1380:	f001 fa45 	bl	80a280e <memset>
 80a1384:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a1386:	4f0e      	ldr	r7, [pc, #56]	; (80a13c0 <_Z22__fetch_global_Serial1v+0x70>)
 80a1388:	6839      	ldr	r1, [r7, #0]
 80a138a:	f011 0601 	ands.w	r6, r1, #1
 80a138e:	d111      	bne.n	80a13b4 <_Z22__fetch_global_Serial1v+0x64>
 80a1390:	4638      	mov	r0, r7
 80a1392:	f7fe fe88 	bl	80a00a6 <__cxa_guard_acquire>
 80a1396:	b168      	cbz	r0, 80a13b4 <_Z22__fetch_global_Serial1v+0x64>
 80a1398:	6822      	ldr	r2, [r4, #0]
 80a139a:	4631      	mov	r1, r6
 80a139c:	682b      	ldr	r3, [r5, #0]
 80a139e:	4809      	ldr	r0, [pc, #36]	; (80a13c4 <_Z22__fetch_global_Serial1v+0x74>)
 80a13a0:	f7ff ffbc 	bl	80a131c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a13a4:	4638      	mov	r0, r7
 80a13a6:	f7fe fe83 	bl	80a00b0 <__cxa_guard_release>
 80a13aa:	4a07      	ldr	r2, [pc, #28]	; (80a13c8 <_Z22__fetch_global_Serial1v+0x78>)
 80a13ac:	4907      	ldr	r1, [pc, #28]	; (80a13cc <_Z22__fetch_global_Serial1v+0x7c>)
 80a13ae:	4805      	ldr	r0, [pc, #20]	; (80a13c4 <_Z22__fetch_global_Serial1v+0x74>)
 80a13b0:	f000 fa76 	bl	80a18a0 <__aeabi_atexit>
#endif
	return serial1;
}
 80a13b4:	4803      	ldr	r0, [pc, #12]	; (80a13c4 <_Z22__fetch_global_Serial1v+0x74>)
 80a13b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a13b8:	200001fc 	.word	0x200001fc
 80a13bc:	200001f4 	.word	0x200001f4
 80a13c0:	200001f8 	.word	0x200001f8
 80a13c4:	200001e0 	.word	0x200001e0
 80a13c8:	20000084 	.word	0x20000084
 80a13cc:	080a1299 	.word	0x080a1299

080a13d0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a13d0:	7441      	strb	r1, [r0, #17]
 80a13d2:	4770      	bx	lr

080a13d4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a13d4:	4770      	bx	lr

080a13d6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a13d6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a13d8:	2100      	movs	r1, #0
 80a13da:	7c00      	ldrb	r0, [r0, #16]
 80a13dc:	f7ff f90c 	bl	80a05f8 <HAL_USB_USART_Receive_Data>
}
 80a13e0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a13e4:	bf28      	it	cs
 80a13e6:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a13ea:	bd08      	pop	{r3, pc}

080a13ec <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a13ec:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a13ee:	2101      	movs	r1, #1
 80a13f0:	7c00      	ldrb	r0, [r0, #16]
 80a13f2:	f7ff f901 	bl	80a05f8 <HAL_USB_USART_Receive_Data>
}
 80a13f6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a13fa:	bf28      	it	cs
 80a13fc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1400:	bd08      	pop	{r3, pc}

080a1402 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a1402:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1404:	7c00      	ldrb	r0, [r0, #16]
 80a1406:	f7ff f8ef 	bl	80a05e8 <HAL_USB_USART_Available_Data_For_Write>
}
 80a140a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a140e:	bd08      	pop	{r3, pc}

080a1410 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1410:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1412:	7c00      	ldrb	r0, [r0, #16]
 80a1414:	f7ff f8e0 	bl	80a05d8 <HAL_USB_USART_Available_Data>
}
 80a1418:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a141c:	bd08      	pop	{r3, pc}

080a141e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a141e:	7c00      	ldrb	r0, [r0, #16]
 80a1420:	f7ff b8fa 	b.w	80a0618 <HAL_USB_USART_Flush_Data>

080a1424 <_ZN9USBSerialD0Ev>:
 80a1424:	b510      	push	{r4, lr}
 80a1426:	4604      	mov	r4, r0
 80a1428:	2114      	movs	r1, #20
 80a142a:	f000 fa3e 	bl	80a18aa <_ZdlPvj>
 80a142e:	4620      	mov	r0, r4
 80a1430:	bd10      	pop	{r4, pc}

080a1432 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1432:	b538      	push	{r3, r4, r5, lr}
 80a1434:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1436:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1438:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a143a:	f7ff f8d5 	bl	80a05e8 <HAL_USB_USART_Available_Data_For_Write>
 80a143e:	2800      	cmp	r0, #0
 80a1440:	dc01      	bgt.n	80a1446 <_ZN9USBSerial5writeEh+0x14>
 80a1442:	7c60      	ldrb	r0, [r4, #17]
 80a1444:	b128      	cbz	r0, 80a1452 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1446:	4629      	mov	r1, r5
 80a1448:	7c20      	ldrb	r0, [r4, #16]
 80a144a:	f7ff f8dd 	bl	80a0608 <HAL_USB_USART_Send_Data>
 80a144e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a1452:	bd38      	pop	{r3, r4, r5, pc}

080a1454 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1454:	b510      	push	{r4, lr}
 80a1456:	4604      	mov	r4, r0
 80a1458:	2300      	movs	r3, #0
 80a145a:	6063      	str	r3, [r4, #4]
 80a145c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1460:	60a3      	str	r3, [r4, #8]
 80a1462:	4b05      	ldr	r3, [pc, #20]	; (80a1478 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1464:	4608      	mov	r0, r1
 80a1466:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1468:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a146a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a146c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a146e:	4611      	mov	r1, r2
 80a1470:	f7ff f8aa 	bl	80a05c8 <HAL_USB_USART_Init>
}
 80a1474:	4620      	mov	r0, r4
 80a1476:	bd10      	pop	{r4, pc}
 80a1478:	080a2bf4 	.word	0x080a2bf4

080a147c <_Z19acquireSerialBufferv>:
 80a147c:	b510      	push	{r4, lr}
 80a147e:	4604      	mov	r4, r0
 80a1480:	2214      	movs	r2, #20
 80a1482:	2100      	movs	r1, #0
 80a1484:	f001 f9c3 	bl	80a280e <memset>
 80a1488:	4620      	mov	r0, r4
 80a148a:	bd10      	pop	{r4, pc}

080a148c <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a148c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a148e:	4d0e      	ldr	r5, [pc, #56]	; (80a14c8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1490:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1492:	a801      	add	r0, sp, #4
 80a1494:	f7ff fff2 	bl	80a147c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1498:	6829      	ldr	r1, [r5, #0]
 80a149a:	f011 0401 	ands.w	r4, r1, #1
 80a149e:	d110      	bne.n	80a14c2 <_Z16_fetch_usbserialv+0x36>
 80a14a0:	4628      	mov	r0, r5
 80a14a2:	f7fe fe00 	bl	80a00a6 <__cxa_guard_acquire>
 80a14a6:	b160      	cbz	r0, 80a14c2 <_Z16_fetch_usbserialv+0x36>
 80a14a8:	aa01      	add	r2, sp, #4
 80a14aa:	4621      	mov	r1, r4
 80a14ac:	4807      	ldr	r0, [pc, #28]	; (80a14cc <_Z16_fetch_usbserialv+0x40>)
 80a14ae:	f7ff ffd1 	bl	80a1454 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a14b2:	4628      	mov	r0, r5
 80a14b4:	f7fe fdfc 	bl	80a00b0 <__cxa_guard_release>
 80a14b8:	4a05      	ldr	r2, [pc, #20]	; (80a14d0 <_Z16_fetch_usbserialv+0x44>)
 80a14ba:	4906      	ldr	r1, [pc, #24]	; (80a14d4 <_Z16_fetch_usbserialv+0x48>)
 80a14bc:	4803      	ldr	r0, [pc, #12]	; (80a14cc <_Z16_fetch_usbserialv+0x40>)
 80a14be:	f000 f9ef 	bl	80a18a0 <__aeabi_atexit>
	return _usbserial;
}
 80a14c2:	4802      	ldr	r0, [pc, #8]	; (80a14cc <_Z16_fetch_usbserialv+0x40>)
 80a14c4:	b007      	add	sp, #28
 80a14c6:	bd30      	pop	{r4, r5, pc}
 80a14c8:	20000200 	.word	0x20000200
 80a14cc:	20000208 	.word	0x20000208
 80a14d0:	20000084 	.word	0x20000084
 80a14d4:	080a13d5 	.word	0x080a13d5

080a14d8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a14d8:	b510      	push	{r4, lr}
 80a14da:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a14dc:	2214      	movs	r2, #20
 80a14de:	2100      	movs	r1, #0
 80a14e0:	f001 f995 	bl	80a280e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a14e4:	4620      	mov	r0, r4
 80a14e6:	bd10      	pop	{r4, pc}

080a14e8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a14e8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a14ea:	4c0e      	ldr	r4, [pc, #56]	; (80a1524 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a14ec:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a14ee:	a801      	add	r0, sp, #4
 80a14f0:	f7ff fff2 	bl	80a14d8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a14f4:	6823      	ldr	r3, [r4, #0]
 80a14f6:	07db      	lsls	r3, r3, #31
 80a14f8:	d410      	bmi.n	80a151c <_Z17_fetch_usbserial1v+0x34>
 80a14fa:	4620      	mov	r0, r4
 80a14fc:	f7fe fdd3 	bl	80a00a6 <__cxa_guard_acquire>
 80a1500:	b160      	cbz	r0, 80a151c <_Z17_fetch_usbserial1v+0x34>
 80a1502:	aa01      	add	r2, sp, #4
 80a1504:	2101      	movs	r1, #1
 80a1506:	4808      	ldr	r0, [pc, #32]	; (80a1528 <_Z17_fetch_usbserial1v+0x40>)
 80a1508:	f7ff ffa4 	bl	80a1454 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a150c:	4620      	mov	r0, r4
 80a150e:	f7fe fdcf 	bl	80a00b0 <__cxa_guard_release>
 80a1512:	4a06      	ldr	r2, [pc, #24]	; (80a152c <_Z17_fetch_usbserial1v+0x44>)
 80a1514:	4906      	ldr	r1, [pc, #24]	; (80a1530 <_Z17_fetch_usbserial1v+0x48>)
 80a1516:	4804      	ldr	r0, [pc, #16]	; (80a1528 <_Z17_fetch_usbserial1v+0x40>)
 80a1518:	f000 f9c2 	bl	80a18a0 <__aeabi_atexit>
  return _usbserial1;
}
 80a151c:	4802      	ldr	r0, [pc, #8]	; (80a1528 <_Z17_fetch_usbserial1v+0x40>)
 80a151e:	b006      	add	sp, #24
 80a1520:	bd10      	pop	{r4, pc}
 80a1522:	bf00      	nop
 80a1524:	20000204 	.word	0x20000204
 80a1528:	2000021c 	.word	0x2000021c
 80a152c:	20000084 	.word	0x20000084
 80a1530:	080a13d5 	.word	0x080a13d5

080a1534 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1534:	2200      	movs	r2, #0
 80a1536:	4611      	mov	r1, r2
 80a1538:	6840      	ldr	r0, [r0, #4]
 80a153a:	f7ff b8e1 	b.w	80a0700 <network_ready>

080a153e <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a153e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1540:	4616      	mov	r6, r2
 80a1542:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1544:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1546:	460f      	mov	r7, r1
 80a1548:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a154a:	2100      	movs	r1, #0
 80a154c:	a803      	add	r0, sp, #12
 80a154e:	f001 f95e 	bl	80a280e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1552:	4630      	mov	r0, r6
 80a1554:	f001 f9a7 	bl	80a28a6 <strlen>
 80a1558:	2500      	movs	r5, #0
 80a155a:	9500      	str	r5, [sp, #0]
 80a155c:	b281      	uxth	r1, r0
 80a155e:	687b      	ldr	r3, [r7, #4]
 80a1560:	aa03      	add	r2, sp, #12
 80a1562:	4630      	mov	r0, r6
 80a1564:	f7ff f860 	bl	80a0628 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1568:	b120      	cbz	r0, 80a1574 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a156a:	4629      	mov	r1, r5
 80a156c:	4620      	mov	r0, r4
 80a156e:	f7ff fce1 	bl	80a0f34 <_ZN9IPAddressC1Em>
 80a1572:	e003      	b.n	80a157c <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1574:	a903      	add	r1, sp, #12
 80a1576:	4620      	mov	r0, r4
 80a1578:	f7ff fcca 	bl	80a0f10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a157c:	4620      	mov	r0, r4
 80a157e:	b009      	add	sp, #36	; 0x24
 80a1580:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1582 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1582:	2200      	movs	r2, #0
 80a1584:	4611      	mov	r1, r2
 80a1586:	6840      	ldr	r0, [r0, #4]
 80a1588:	f7ff b8da 	b.w	80a0740 <network_listening>

080a158c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a158c:	2200      	movs	r2, #0
 80a158e:	4611      	mov	r1, r2
 80a1590:	6840      	ldr	r0, [r0, #4]
 80a1592:	f7ff b8e5 	b.w	80a0760 <network_get_listen_timeout>

080a1596 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1596:	2200      	movs	r2, #0
 80a1598:	6840      	ldr	r0, [r0, #4]
 80a159a:	f7ff b8d9 	b.w	80a0750 <network_set_listen_timeout>

080a159e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a159e:	2200      	movs	r2, #0
 80a15a0:	f081 0101 	eor.w	r1, r1, #1
 80a15a4:	6840      	ldr	r0, [r0, #4]
 80a15a6:	f7ff b8c3 	b.w	80a0730 <network_listen>

080a15aa <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a15aa:	2300      	movs	r3, #0
 80a15ac:	461a      	mov	r2, r3
 80a15ae:	4619      	mov	r1, r3
 80a15b0:	6840      	ldr	r0, [r0, #4]
 80a15b2:	f7ff b8b5 	b.w	80a0720 <network_off>

080a15b6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a15b6:	2300      	movs	r3, #0
 80a15b8:	461a      	mov	r2, r3
 80a15ba:	4619      	mov	r1, r3
 80a15bc:	6840      	ldr	r0, [r0, #4]
 80a15be:	f7ff b8a7 	b.w	80a0710 <network_on>

080a15c2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a15c2:	2200      	movs	r2, #0
 80a15c4:	4611      	mov	r1, r2
 80a15c6:	6840      	ldr	r0, [r0, #4]
 80a15c8:	f7ff b88a 	b.w	80a06e0 <network_connecting>

080a15cc <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a15cc:	2200      	movs	r2, #0
 80a15ce:	2102      	movs	r1, #2
 80a15d0:	6840      	ldr	r0, [r0, #4]
 80a15d2:	f7ff b88d 	b.w	80a06f0 <network_disconnect>

080a15d6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a15d6:	2300      	movs	r3, #0
 80a15d8:	461a      	mov	r2, r3
 80a15da:	6840      	ldr	r0, [r0, #4]
 80a15dc:	f7ff b878 	b.w	80a06d0 <network_connect>

080a15e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a15e0:	4b02      	ldr	r3, [pc, #8]	; (80a15ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a15e2:	2204      	movs	r2, #4
 80a15e4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a15e6:	4a02      	ldr	r2, [pc, #8]	; (80a15f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a15e8:	601a      	str	r2, [r3, #0]
 80a15ea:	4770      	bx	lr
 80a15ec:	20000230 	.word	0x20000230
 80a15f0:	080a2c24 	.word	0x080a2c24

080a15f4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a15f4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a15f6:	4b14      	ldr	r3, [pc, #80]	; (80a1648 <serialEventRun+0x54>)
 80a15f8:	b133      	cbz	r3, 80a1608 <serialEventRun+0x14>
 80a15fa:	f7ff ff47 	bl	80a148c <_Z16_fetch_usbserialv>
 80a15fe:	6803      	ldr	r3, [r0, #0]
 80a1600:	691b      	ldr	r3, [r3, #16]
 80a1602:	4798      	blx	r3
 80a1604:	2800      	cmp	r0, #0
 80a1606:	dc16      	bgt.n	80a1636 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1608:	4b10      	ldr	r3, [pc, #64]	; (80a164c <serialEventRun+0x58>)
 80a160a:	b133      	cbz	r3, 80a161a <serialEventRun+0x26>
 80a160c:	f7ff fea0 	bl	80a1350 <_Z22__fetch_global_Serial1v>
 80a1610:	6803      	ldr	r3, [r0, #0]
 80a1612:	691b      	ldr	r3, [r3, #16]
 80a1614:	4798      	blx	r3
 80a1616:	2800      	cmp	r0, #0
 80a1618:	dc10      	bgt.n	80a163c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a161a:	4b0d      	ldr	r3, [pc, #52]	; (80a1650 <serialEventRun+0x5c>)
 80a161c:	b10b      	cbz	r3, 80a1622 <serialEventRun+0x2e>
 80a161e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1622:	4b0c      	ldr	r3, [pc, #48]	; (80a1654 <serialEventRun+0x60>)
 80a1624:	b17b      	cbz	r3, 80a1646 <serialEventRun+0x52>
 80a1626:	f7ff ff5f 	bl	80a14e8 <_Z17_fetch_usbserial1v>
 80a162a:	6803      	ldr	r3, [r0, #0]
 80a162c:	691b      	ldr	r3, [r3, #16]
 80a162e:	4798      	blx	r3
 80a1630:	2800      	cmp	r0, #0
 80a1632:	dc06      	bgt.n	80a1642 <serialEventRun+0x4e>
 80a1634:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1636:	f3af 8000 	nop.w
 80a163a:	e7e5      	b.n	80a1608 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a163c:	f3af 8000 	nop.w
 80a1640:	e7eb      	b.n	80a161a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1642:	f3af 8000 	nop.w
 80a1646:	bd08      	pop	{r3, pc}
	...

080a1658 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1658:	b508      	push	{r3, lr}
	serialEventRun();
 80a165a:	f7ff ffcb 	bl	80a15f4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a165e:	f7fe fef1 	bl	80a0444 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1662:	4b01      	ldr	r3, [pc, #4]	; (80a1668 <_post_loop+0x10>)
 80a1664:	6018      	str	r0, [r3, #0]
 80a1666:	bd08      	pop	{r3, pc}
 80a1668:	20000240 	.word	0x20000240

080a166c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a166c:	4802      	ldr	r0, [pc, #8]	; (80a1678 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a166e:	4a03      	ldr	r2, [pc, #12]	; (80a167c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1670:	4903      	ldr	r1, [pc, #12]	; (80a1680 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1672:	1a12      	subs	r2, r2, r0
 80a1674:	f001 b8c0 	b.w	80a27f8 <memcpy>
 80a1678:	40024000 	.word	0x40024000
 80a167c:	40024004 	.word	0x40024004
 80a1680:	080a2cf0 	.word	0x080a2cf0

080a1684 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1684:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1686:	2300      	movs	r3, #0
 80a1688:	9300      	str	r3, [sp, #0]
 80a168a:	461a      	mov	r2, r3
 80a168c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1690:	f7fe fffc 	bl	80a068c <system_ctrl_set_result>
}
 80a1694:	b003      	add	sp, #12
 80a1696:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a169c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a169c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a169e:	8843      	ldrh	r3, [r0, #2]
 80a16a0:	2b0a      	cmp	r3, #10
 80a16a2:	d008      	beq.n	80a16b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a16a4:	2b50      	cmp	r3, #80	; 0x50
 80a16a6:	d109      	bne.n	80a16bc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a16a8:	4b09      	ldr	r3, [pc, #36]	; (80a16d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a16aa:	681b      	ldr	r3, [r3, #0]
 80a16ac:	b13b      	cbz	r3, 80a16be <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a16ae:	b003      	add	sp, #12
 80a16b0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a16b4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a16b6:	f7ff ffe5 	bl	80a1684 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a16ba:	e006      	b.n	80a16ca <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a16bc:	2300      	movs	r3, #0
 80a16be:	9300      	str	r3, [sp, #0]
 80a16c0:	461a      	mov	r2, r3
 80a16c2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a16c6:	f7fe ffe1 	bl	80a068c <system_ctrl_set_result>
        break;
    }
}
 80a16ca:	b003      	add	sp, #12
 80a16cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80a16d0:	20000238 	.word	0x20000238

080a16d4 <module_user_init_hook>:

void module_user_init_hook()
{
 80a16d4:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a16d6:	4c10      	ldr	r4, [pc, #64]	; (80a1718 <module_user_init_hook+0x44>)
 80a16d8:	4d10      	ldr	r5, [pc, #64]	; (80a171c <module_user_init_hook+0x48>)
 80a16da:	6823      	ldr	r3, [r4, #0]
 80a16dc:	42ab      	cmp	r3, r5
 80a16de:	4b10      	ldr	r3, [pc, #64]	; (80a1720 <module_user_init_hook+0x4c>)
 80a16e0:	bf0c      	ite	eq
 80a16e2:	2201      	moveq	r2, #1
 80a16e4:	2200      	movne	r2, #0
 80a16e6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a16e8:	d002      	beq.n	80a16f0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a16ea:	f7ff ffbf 	bl	80a166c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a16ee:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a16f0:	f7fe fea0 	bl	80a0434 <HAL_RNG_GetRandomNumber>
 80a16f4:	4604      	mov	r4, r0
    srand(seed);
 80a16f6:	f001 f893 	bl	80a2820 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a16fa:	4b0a      	ldr	r3, [pc, #40]	; (80a1724 <module_user_init_hook+0x50>)
 80a16fc:	b113      	cbz	r3, 80a1704 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a16fe:	4620      	mov	r0, r4
 80a1700:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1704:	2100      	movs	r1, #0
 80a1706:	4807      	ldr	r0, [pc, #28]	; (80a1724 <module_user_init_hook+0x50>)
 80a1708:	f7fe ffda 	bl	80a06c0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a170c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1710:	2100      	movs	r1, #0
 80a1712:	4805      	ldr	r0, [pc, #20]	; (80a1728 <module_user_init_hook+0x54>)
 80a1714:	f7fe bfb0 	b.w	80a0678 <system_ctrl_set_app_request_handler>
 80a1718:	40024000 	.word	0x40024000
 80a171c:	9a271c1e 	.word	0x9a271c1e
 80a1720:	2000023c 	.word	0x2000023c
 80a1724:	00000000 	.word	0x00000000
 80a1728:	080a169d 	.word	0x080a169d

080a172c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a172c:	b510      	push	{r4, lr}
 80a172e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1730:	480f      	ldr	r0, [pc, #60]	; (80a1770 <pinAvailable+0x44>)
 80a1732:	f7ff fd15 	bl	80a1160 <_ZN8SPIClass9isEnabledEv>
 80a1736:	b128      	cbz	r0, 80a1744 <pinAvailable+0x18>
 80a1738:	f1a4 030d 	sub.w	r3, r4, #13
 80a173c:	2b02      	cmp	r3, #2
 80a173e:	d801      	bhi.n	80a1744 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a1740:	2000      	movs	r0, #0
 80a1742:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a1744:	f000 f852 	bl	80a17ec <_Z19__fetch_global_Wirev>
 80a1748:	f7ff fbae 	bl	80a0ea8 <_ZN7TwoWire9isEnabledEv>
 80a174c:	b108      	cbz	r0, 80a1752 <pinAvailable+0x26>
 80a174e:	2c01      	cmp	r4, #1
 80a1750:	d9f6      	bls.n	80a1740 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a1752:	f7ff fdfd 	bl	80a1350 <_Z22__fetch_global_Serial1v>
 80a1756:	f7ff fdf7 	bl	80a1348 <_ZN11USARTSerial9isEnabledEv>
 80a175a:	b118      	cbz	r0, 80a1764 <pinAvailable+0x38>
 80a175c:	f1a4 0312 	sub.w	r3, r4, #18
 80a1760:	2b01      	cmp	r3, #1
 80a1762:	d9ed      	bls.n	80a1740 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a1764:	2c17      	cmp	r4, #23
 80a1766:	bf8c      	ite	hi
 80a1768:	2000      	movhi	r0, #0
 80a176a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a176c:	bd10      	pop	{r4, pc}
 80a176e:	bf00      	nop
 80a1770:	20000274 	.word	0x20000274

080a1774 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1774:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a1776:	b538      	push	{r3, r4, r5, lr}
 80a1778:	4604      	mov	r4, r0
 80a177a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a177c:	d80a      	bhi.n	80a1794 <pinMode+0x20>
 80a177e:	29ff      	cmp	r1, #255	; 0xff
 80a1780:	d008      	beq.n	80a1794 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1782:	f7ff ffd3 	bl	80a172c <pinAvailable>
 80a1786:	b128      	cbz	r0, 80a1794 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1788:	4629      	mov	r1, r5
 80a178a:	4620      	mov	r0, r4
}
 80a178c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1790:	f7fe be70 	b.w	80a0474 <HAL_Pin_Mode>
 80a1794:	bd38      	pop	{r3, r4, r5, pc}

080a1796 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a1796:	b510      	push	{r4, lr}
 80a1798:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a179a:	f7fe fe73 	bl	80a0484 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a179e:	3804      	subs	r0, #4
 80a17a0:	b2c0      	uxtb	r0, r0
 80a17a2:	2801      	cmp	r0, #1
 80a17a4:	d908      	bls.n	80a17b8 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a17a6:	4620      	mov	r0, r4
 80a17a8:	f7ff ffc0 	bl	80a172c <pinAvailable>
 80a17ac:	b120      	cbz	r0, 80a17b8 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a17ae:	4620      	mov	r0, r4
}
 80a17b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a17b4:	f7fe be6e 	b.w	80a0494 <HAL_GPIO_Read>
}
 80a17b8:	2000      	movs	r0, #0
 80a17ba:	bd10      	pop	{r4, pc}

080a17bc <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a17bc:	b510      	push	{r4, lr}
 80a17be:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a17c0:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a17c2:	bf9c      	itt	ls
 80a17c4:	340a      	addls	r4, #10
 80a17c6:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a17c8:	4620      	mov	r0, r4
 80a17ca:	f7ff ffaf 	bl	80a172c <pinAvailable>
 80a17ce:	b150      	cbz	r0, 80a17e6 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a17d0:	2103      	movs	r1, #3
 80a17d2:	4620      	mov	r0, r4
 80a17d4:	f7fe fe46 	bl	80a0464 <HAL_Validate_Pin_Function>
 80a17d8:	2803      	cmp	r0, #3
 80a17da:	d104      	bne.n	80a17e6 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a17dc:	4620      	mov	r0, r4
}
 80a17de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a17e2:	f7fe be5f 	b.w	80a04a4 <HAL_ADC_Read>
}
 80a17e6:	2000      	movs	r0, #0
 80a17e8:	bd10      	pop	{r4, pc}
	...

080a17ec <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a17ec:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a17ee:	4d0b      	ldr	r5, [pc, #44]	; (80a181c <_Z19__fetch_global_Wirev+0x30>)
 80a17f0:	6829      	ldr	r1, [r5, #0]
 80a17f2:	f011 0401 	ands.w	r4, r1, #1
 80a17f6:	d10f      	bne.n	80a1818 <_Z19__fetch_global_Wirev+0x2c>
 80a17f8:	4628      	mov	r0, r5
 80a17fa:	f7fe fc54 	bl	80a00a6 <__cxa_guard_acquire>
 80a17fe:	b158      	cbz	r0, 80a1818 <_Z19__fetch_global_Wirev+0x2c>
 80a1800:	4621      	mov	r1, r4
 80a1802:	4807      	ldr	r0, [pc, #28]	; (80a1820 <_Z19__fetch_global_Wirev+0x34>)
 80a1804:	f7ff fb3e 	bl	80a0e84 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1808:	4628      	mov	r0, r5
 80a180a:	f7fe fc51 	bl	80a00b0 <__cxa_guard_release>
 80a180e:	4a05      	ldr	r2, [pc, #20]	; (80a1824 <_Z19__fetch_global_Wirev+0x38>)
 80a1810:	4905      	ldr	r1, [pc, #20]	; (80a1828 <_Z19__fetch_global_Wirev+0x3c>)
 80a1812:	4803      	ldr	r0, [pc, #12]	; (80a1820 <_Z19__fetch_global_Wirev+0x34>)
 80a1814:	f000 f844 	bl	80a18a0 <__aeabi_atexit>
	return wire;
}
 80a1818:	4801      	ldr	r0, [pc, #4]	; (80a1820 <_Z19__fetch_global_Wirev+0x34>)
 80a181a:	bd38      	pop	{r3, r4, r5, pc}
 80a181c:	20000244 	.word	0x20000244
 80a1820:	20000248 	.word	0x20000248
 80a1824:	20000084 	.word	0x20000084
 80a1828:	080a0e2d 	.word	0x080a0e2d

080a182c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a182c:	b513      	push	{r0, r1, r4, lr}
 80a182e:	4c08      	ldr	r4, [pc, #32]	; (80a1850 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1830:	2300      	movs	r3, #0
 80a1832:	461a      	mov	r2, r3
 80a1834:	4619      	mov	r1, r3
 80a1836:	9300      	str	r3, [sp, #0]
 80a1838:	4620      	mov	r0, r4
 80a183a:	f7ff fb91 	bl	80a0f60 <_ZN9IPAddressC1Ehhhh>
 80a183e:	4620      	mov	r0, r4
 80a1840:	4a04      	ldr	r2, [pc, #16]	; (80a1854 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1842:	4905      	ldr	r1, [pc, #20]	; (80a1858 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1844:	b002      	add	sp, #8
 80a1846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a184a:	f000 b829 	b.w	80a18a0 <__aeabi_atexit>
 80a184e:	bf00      	nop
 80a1850:	2000025c 	.word	0x2000025c
 80a1854:	20000084 	.word	0x20000084
 80a1858:	080a0eb1 	.word	0x080a0eb1

080a185c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a185c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a185e:	4c0c      	ldr	r4, [pc, #48]	; (80a1890 <_GLOBAL__sub_I_SPI+0x34>)
 80a1860:	4e0c      	ldr	r6, [pc, #48]	; (80a1894 <_GLOBAL__sub_I_SPI+0x38>)
 80a1862:	4d0d      	ldr	r5, [pc, #52]	; (80a1898 <_GLOBAL__sub_I_SPI+0x3c>)
 80a1864:	2100      	movs	r1, #0
 80a1866:	4620      	mov	r0, r4
 80a1868:	f7ff fc66 	bl	80a1138 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a186c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a186e:	4c0b      	ldr	r4, [pc, #44]	; (80a189c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1870:	4632      	mov	r2, r6
 80a1872:	4629      	mov	r1, r5
 80a1874:	f000 f814 	bl	80a18a0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1878:	2101      	movs	r1, #1
 80a187a:	4620      	mov	r0, r4
 80a187c:	f7ff fc5c 	bl	80a1138 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1880:	4632      	mov	r2, r6
 80a1882:	4629      	mov	r1, r5
 80a1884:	4620      	mov	r0, r4
 80a1886:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a188a:	f000 b809 	b.w	80a18a0 <__aeabi_atexit>
 80a188e:	bf00      	nop
 80a1890:	20000274 	.word	0x20000274
 80a1894:	20000084 	.word	0x20000084
 80a1898:	080a1129 	.word	0x080a1129
 80a189c:	20000284 	.word	0x20000284

080a18a0 <__aeabi_atexit>:
 80a18a0:	460b      	mov	r3, r1
 80a18a2:	4601      	mov	r1, r0
 80a18a4:	4618      	mov	r0, r3
 80a18a6:	f000 bf99 	b.w	80a27dc <__cxa_atexit>

080a18aa <_ZdlPvj>:
 80a18aa:	f7fe bbfa 	b.w	80a00a2 <_ZdlPv>

080a18ae <_ZSt25__throw_bad_function_callv>:
 80a18ae:	b508      	push	{r3, lr}
 80a18b0:	f7fe ff7e 	bl	80a07b0 <abort>

080a18b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a18b4:	4b24      	ldr	r3, [pc, #144]	; (80a1948 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a18b6:	681a      	ldr	r2, [r3, #0]
 80a18b8:	07d0      	lsls	r0, r2, #31
 80a18ba:	bf5c      	itt	pl
 80a18bc:	2201      	movpl	r2, #1
 80a18be:	601a      	strpl	r2, [r3, #0]
 80a18c0:	4b22      	ldr	r3, [pc, #136]	; (80a194c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a18c2:	681a      	ldr	r2, [r3, #0]
 80a18c4:	07d1      	lsls	r1, r2, #31
 80a18c6:	bf5c      	itt	pl
 80a18c8:	2201      	movpl	r2, #1
 80a18ca:	601a      	strpl	r2, [r3, #0]
 80a18cc:	4b20      	ldr	r3, [pc, #128]	; (80a1950 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a18ce:	681a      	ldr	r2, [r3, #0]
 80a18d0:	07d2      	lsls	r2, r2, #31
 80a18d2:	bf5c      	itt	pl
 80a18d4:	2201      	movpl	r2, #1
 80a18d6:	601a      	strpl	r2, [r3, #0]
 80a18d8:	4b1e      	ldr	r3, [pc, #120]	; (80a1954 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a18da:	681a      	ldr	r2, [r3, #0]
 80a18dc:	07d0      	lsls	r0, r2, #31
 80a18de:	bf5c      	itt	pl
 80a18e0:	2201      	movpl	r2, #1
 80a18e2:	601a      	strpl	r2, [r3, #0]
 80a18e4:	4b1c      	ldr	r3, [pc, #112]	; (80a1958 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a18e6:	681a      	ldr	r2, [r3, #0]
 80a18e8:	07d1      	lsls	r1, r2, #31
 80a18ea:	bf5c      	itt	pl
 80a18ec:	2201      	movpl	r2, #1
 80a18ee:	601a      	strpl	r2, [r3, #0]
 80a18f0:	4b1a      	ldr	r3, [pc, #104]	; (80a195c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a18f2:	681a      	ldr	r2, [r3, #0]
 80a18f4:	07d2      	lsls	r2, r2, #31
 80a18f6:	bf5c      	itt	pl
 80a18f8:	2201      	movpl	r2, #1
 80a18fa:	601a      	strpl	r2, [r3, #0]
 80a18fc:	4b18      	ldr	r3, [pc, #96]	; (80a1960 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a18fe:	681a      	ldr	r2, [r3, #0]
 80a1900:	07d0      	lsls	r0, r2, #31
 80a1902:	bf5c      	itt	pl
 80a1904:	2201      	movpl	r2, #1
 80a1906:	601a      	strpl	r2, [r3, #0]
 80a1908:	4b16      	ldr	r3, [pc, #88]	; (80a1964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a190a:	681a      	ldr	r2, [r3, #0]
 80a190c:	07d1      	lsls	r1, r2, #31
 80a190e:	bf5c      	itt	pl
 80a1910:	2201      	movpl	r2, #1
 80a1912:	601a      	strpl	r2, [r3, #0]
 80a1914:	4b14      	ldr	r3, [pc, #80]	; (80a1968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1916:	681a      	ldr	r2, [r3, #0]
 80a1918:	07d2      	lsls	r2, r2, #31
 80a191a:	bf5c      	itt	pl
 80a191c:	2201      	movpl	r2, #1
 80a191e:	601a      	strpl	r2, [r3, #0]
 80a1920:	4b12      	ldr	r3, [pc, #72]	; (80a196c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a1922:	681a      	ldr	r2, [r3, #0]
 80a1924:	07d0      	lsls	r0, r2, #31
 80a1926:	bf5c      	itt	pl
 80a1928:	2201      	movpl	r2, #1
 80a192a:	601a      	strpl	r2, [r3, #0]
 80a192c:	4b10      	ldr	r3, [pc, #64]	; (80a1970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a192e:	681a      	ldr	r2, [r3, #0]
 80a1930:	07d1      	lsls	r1, r2, #31
 80a1932:	bf5c      	itt	pl
 80a1934:	2201      	movpl	r2, #1
 80a1936:	601a      	strpl	r2, [r3, #0]
 80a1938:	4b0e      	ldr	r3, [pc, #56]	; (80a1974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a193a:	681a      	ldr	r2, [r3, #0]
 80a193c:	07d2      	lsls	r2, r2, #31
 80a193e:	bf5c      	itt	pl
 80a1940:	2201      	movpl	r2, #1
 80a1942:	601a      	strpl	r2, [r3, #0]
 80a1944:	4770      	bx	lr
 80a1946:	bf00      	nop
 80a1948:	200002c0 	.word	0x200002c0
 80a194c:	200002bc 	.word	0x200002bc
 80a1950:	200002b8 	.word	0x200002b8
 80a1954:	200002b4 	.word	0x200002b4
 80a1958:	200002b0 	.word	0x200002b0
 80a195c:	200002ac 	.word	0x200002ac
 80a1960:	200002a8 	.word	0x200002a8
 80a1964:	200002a4 	.word	0x200002a4
 80a1968:	200002a0 	.word	0x200002a0
 80a196c:	2000029c 	.word	0x2000029c
 80a1970:	20000298 	.word	0x20000298
 80a1974:	20000294 	.word	0x20000294

080a1978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1978:	4b18      	ldr	r3, [pc, #96]	; (80a19dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a197a:	681a      	ldr	r2, [r3, #0]
 80a197c:	07d1      	lsls	r1, r2, #31
 80a197e:	bf5c      	itt	pl
 80a1980:	2201      	movpl	r2, #1
 80a1982:	601a      	strpl	r2, [r3, #0]
 80a1984:	4b16      	ldr	r3, [pc, #88]	; (80a19e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1986:	681a      	ldr	r2, [r3, #0]
 80a1988:	07d2      	lsls	r2, r2, #31
 80a198a:	bf5c      	itt	pl
 80a198c:	2201      	movpl	r2, #1
 80a198e:	601a      	strpl	r2, [r3, #0]
 80a1990:	4b14      	ldr	r3, [pc, #80]	; (80a19e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1992:	681a      	ldr	r2, [r3, #0]
 80a1994:	07d0      	lsls	r0, r2, #31
 80a1996:	bf5c      	itt	pl
 80a1998:	2201      	movpl	r2, #1
 80a199a:	601a      	strpl	r2, [r3, #0]
 80a199c:	4b12      	ldr	r3, [pc, #72]	; (80a19e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a199e:	681a      	ldr	r2, [r3, #0]
 80a19a0:	07d1      	lsls	r1, r2, #31
 80a19a2:	bf5c      	itt	pl
 80a19a4:	2201      	movpl	r2, #1
 80a19a6:	601a      	strpl	r2, [r3, #0]
 80a19a8:	4b10      	ldr	r3, [pc, #64]	; (80a19ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a19aa:	681a      	ldr	r2, [r3, #0]
 80a19ac:	07d2      	lsls	r2, r2, #31
 80a19ae:	bf5c      	itt	pl
 80a19b0:	2201      	movpl	r2, #1
 80a19b2:	601a      	strpl	r2, [r3, #0]
 80a19b4:	4b0e      	ldr	r3, [pc, #56]	; (80a19f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a19b6:	681a      	ldr	r2, [r3, #0]
 80a19b8:	07d0      	lsls	r0, r2, #31
 80a19ba:	bf5c      	itt	pl
 80a19bc:	2201      	movpl	r2, #1
 80a19be:	601a      	strpl	r2, [r3, #0]
 80a19c0:	4b0c      	ldr	r3, [pc, #48]	; (80a19f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a19c2:	681a      	ldr	r2, [r3, #0]
 80a19c4:	07d1      	lsls	r1, r2, #31
 80a19c6:	bf5c      	itt	pl
 80a19c8:	2201      	movpl	r2, #1
 80a19ca:	601a      	strpl	r2, [r3, #0]
 80a19cc:	4b0a      	ldr	r3, [pc, #40]	; (80a19f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a19ce:	681a      	ldr	r2, [r3, #0]
 80a19d0:	07d2      	lsls	r2, r2, #31
 80a19d2:	bf5c      	itt	pl
 80a19d4:	2201      	movpl	r2, #1
 80a19d6:	601a      	strpl	r2, [r3, #0]
 80a19d8:	4770      	bx	lr
 80a19da:	bf00      	nop
 80a19dc:	200002e0 	.word	0x200002e0
 80a19e0:	200002dc 	.word	0x200002dc
 80a19e4:	200002d8 	.word	0x200002d8
 80a19e8:	200002d4 	.word	0x200002d4
 80a19ec:	200002d0 	.word	0x200002d0
 80a19f0:	200002cc 	.word	0x200002cc
 80a19f4:	200002c8 	.word	0x200002c8
 80a19f8:	200002c4 	.word	0x200002c4

080a19fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a19fc:	4b18      	ldr	r3, [pc, #96]	; (80a1a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a19fe:	681a      	ldr	r2, [r3, #0]
 80a1a00:	07d1      	lsls	r1, r2, #31
 80a1a02:	bf5c      	itt	pl
 80a1a04:	2201      	movpl	r2, #1
 80a1a06:	601a      	strpl	r2, [r3, #0]
 80a1a08:	4b16      	ldr	r3, [pc, #88]	; (80a1a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1a0a:	681a      	ldr	r2, [r3, #0]
 80a1a0c:	07d2      	lsls	r2, r2, #31
 80a1a0e:	bf5c      	itt	pl
 80a1a10:	2201      	movpl	r2, #1
 80a1a12:	601a      	strpl	r2, [r3, #0]
 80a1a14:	4b14      	ldr	r3, [pc, #80]	; (80a1a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1a16:	681a      	ldr	r2, [r3, #0]
 80a1a18:	07d0      	lsls	r0, r2, #31
 80a1a1a:	bf5c      	itt	pl
 80a1a1c:	2201      	movpl	r2, #1
 80a1a1e:	601a      	strpl	r2, [r3, #0]
 80a1a20:	4b12      	ldr	r3, [pc, #72]	; (80a1a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1a22:	681a      	ldr	r2, [r3, #0]
 80a1a24:	07d1      	lsls	r1, r2, #31
 80a1a26:	bf5c      	itt	pl
 80a1a28:	2201      	movpl	r2, #1
 80a1a2a:	601a      	strpl	r2, [r3, #0]
 80a1a2c:	4b10      	ldr	r3, [pc, #64]	; (80a1a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1a2e:	681a      	ldr	r2, [r3, #0]
 80a1a30:	07d2      	lsls	r2, r2, #31
 80a1a32:	bf5c      	itt	pl
 80a1a34:	2201      	movpl	r2, #1
 80a1a36:	601a      	strpl	r2, [r3, #0]
 80a1a38:	4b0e      	ldr	r3, [pc, #56]	; (80a1a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1a3a:	681a      	ldr	r2, [r3, #0]
 80a1a3c:	07d0      	lsls	r0, r2, #31
 80a1a3e:	bf5c      	itt	pl
 80a1a40:	2201      	movpl	r2, #1
 80a1a42:	601a      	strpl	r2, [r3, #0]
 80a1a44:	4b0c      	ldr	r3, [pc, #48]	; (80a1a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1a46:	681a      	ldr	r2, [r3, #0]
 80a1a48:	07d1      	lsls	r1, r2, #31
 80a1a4a:	bf5c      	itt	pl
 80a1a4c:	2201      	movpl	r2, #1
 80a1a4e:	601a      	strpl	r2, [r3, #0]
 80a1a50:	4b0a      	ldr	r3, [pc, #40]	; (80a1a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1a52:	681a      	ldr	r2, [r3, #0]
 80a1a54:	07d2      	lsls	r2, r2, #31
 80a1a56:	bf5c      	itt	pl
 80a1a58:	2201      	movpl	r2, #1
 80a1a5a:	601a      	strpl	r2, [r3, #0]
 80a1a5c:	4770      	bx	lr
 80a1a5e:	bf00      	nop
 80a1a60:	20000300 	.word	0x20000300
 80a1a64:	200002fc 	.word	0x200002fc
 80a1a68:	200002f8 	.word	0x200002f8
 80a1a6c:	200002f4 	.word	0x200002f4
 80a1a70:	200002f0 	.word	0x200002f0
 80a1a74:	200002ec 	.word	0x200002ec
 80a1a78:	200002e8 	.word	0x200002e8
 80a1a7c:	200002e4 	.word	0x200002e4

080a1a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1a80:	4b24      	ldr	r3, [pc, #144]	; (80a1b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1a82:	681a      	ldr	r2, [r3, #0]
 80a1a84:	07d0      	lsls	r0, r2, #31
 80a1a86:	bf5c      	itt	pl
 80a1a88:	2201      	movpl	r2, #1
 80a1a8a:	601a      	strpl	r2, [r3, #0]
 80a1a8c:	4b22      	ldr	r3, [pc, #136]	; (80a1b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1a8e:	681a      	ldr	r2, [r3, #0]
 80a1a90:	07d1      	lsls	r1, r2, #31
 80a1a92:	bf5c      	itt	pl
 80a1a94:	2201      	movpl	r2, #1
 80a1a96:	601a      	strpl	r2, [r3, #0]
 80a1a98:	4b20      	ldr	r3, [pc, #128]	; (80a1b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1a9a:	681a      	ldr	r2, [r3, #0]
 80a1a9c:	07d2      	lsls	r2, r2, #31
 80a1a9e:	bf5c      	itt	pl
 80a1aa0:	2201      	movpl	r2, #1
 80a1aa2:	601a      	strpl	r2, [r3, #0]
 80a1aa4:	4b1e      	ldr	r3, [pc, #120]	; (80a1b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1aa6:	681a      	ldr	r2, [r3, #0]
 80a1aa8:	07d0      	lsls	r0, r2, #31
 80a1aaa:	bf5c      	itt	pl
 80a1aac:	2201      	movpl	r2, #1
 80a1aae:	601a      	strpl	r2, [r3, #0]
 80a1ab0:	4b1c      	ldr	r3, [pc, #112]	; (80a1b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1ab2:	681a      	ldr	r2, [r3, #0]
 80a1ab4:	07d1      	lsls	r1, r2, #31
 80a1ab6:	bf5c      	itt	pl
 80a1ab8:	2201      	movpl	r2, #1
 80a1aba:	601a      	strpl	r2, [r3, #0]
 80a1abc:	4b1a      	ldr	r3, [pc, #104]	; (80a1b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1abe:	681a      	ldr	r2, [r3, #0]
 80a1ac0:	07d2      	lsls	r2, r2, #31
 80a1ac2:	bf5c      	itt	pl
 80a1ac4:	2201      	movpl	r2, #1
 80a1ac6:	601a      	strpl	r2, [r3, #0]
 80a1ac8:	4b18      	ldr	r3, [pc, #96]	; (80a1b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1aca:	681a      	ldr	r2, [r3, #0]
 80a1acc:	07d0      	lsls	r0, r2, #31
 80a1ace:	bf5c      	itt	pl
 80a1ad0:	2201      	movpl	r2, #1
 80a1ad2:	601a      	strpl	r2, [r3, #0]
 80a1ad4:	4b16      	ldr	r3, [pc, #88]	; (80a1b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1ad6:	681a      	ldr	r2, [r3, #0]
 80a1ad8:	07d1      	lsls	r1, r2, #31
 80a1ada:	bf5c      	itt	pl
 80a1adc:	2201      	movpl	r2, #1
 80a1ade:	601a      	strpl	r2, [r3, #0]
 80a1ae0:	4b14      	ldr	r3, [pc, #80]	; (80a1b34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1ae2:	681a      	ldr	r2, [r3, #0]
 80a1ae4:	07d2      	lsls	r2, r2, #31
 80a1ae6:	bf5c      	itt	pl
 80a1ae8:	2201      	movpl	r2, #1
 80a1aea:	601a      	strpl	r2, [r3, #0]
 80a1aec:	4b12      	ldr	r3, [pc, #72]	; (80a1b38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1aee:	681a      	ldr	r2, [r3, #0]
 80a1af0:	07d0      	lsls	r0, r2, #31
 80a1af2:	bf5c      	itt	pl
 80a1af4:	2201      	movpl	r2, #1
 80a1af6:	601a      	strpl	r2, [r3, #0]
 80a1af8:	4b10      	ldr	r3, [pc, #64]	; (80a1b3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1afa:	681a      	ldr	r2, [r3, #0]
 80a1afc:	07d1      	lsls	r1, r2, #31
 80a1afe:	bf5c      	itt	pl
 80a1b00:	2201      	movpl	r2, #1
 80a1b02:	601a      	strpl	r2, [r3, #0]
 80a1b04:	4b0e      	ldr	r3, [pc, #56]	; (80a1b40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1b06:	681a      	ldr	r2, [r3, #0]
 80a1b08:	07d2      	lsls	r2, r2, #31
 80a1b0a:	bf5c      	itt	pl
 80a1b0c:	2201      	movpl	r2, #1
 80a1b0e:	601a      	strpl	r2, [r3, #0]
 80a1b10:	4770      	bx	lr
 80a1b12:	bf00      	nop
 80a1b14:	20000330 	.word	0x20000330
 80a1b18:	2000032c 	.word	0x2000032c
 80a1b1c:	20000328 	.word	0x20000328
 80a1b20:	20000324 	.word	0x20000324
 80a1b24:	20000320 	.word	0x20000320
 80a1b28:	2000031c 	.word	0x2000031c
 80a1b2c:	20000318 	.word	0x20000318
 80a1b30:	20000314 	.word	0x20000314
 80a1b34:	20000310 	.word	0x20000310
 80a1b38:	2000030c 	.word	0x2000030c
 80a1b3c:	20000308 	.word	0x20000308
 80a1b40:	20000304 	.word	0x20000304

080a1b44 <__aeabi_drsub>:
 80a1b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a1b48:	e002      	b.n	80a1b50 <__adddf3>
 80a1b4a:	bf00      	nop

080a1b4c <__aeabi_dsub>:
 80a1b4c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a1b50 <__adddf3>:
 80a1b50:	b530      	push	{r4, r5, lr}
 80a1b52:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a1b56:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a1b5a:	ea94 0f05 	teq	r4, r5
 80a1b5e:	bf08      	it	eq
 80a1b60:	ea90 0f02 	teqeq	r0, r2
 80a1b64:	bf1f      	itttt	ne
 80a1b66:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a1b6a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a1b6e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a1b72:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1b76:	f000 80e2 	beq.w	80a1d3e <__adddf3+0x1ee>
 80a1b7a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a1b7e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a1b82:	bfb8      	it	lt
 80a1b84:	426d      	neglt	r5, r5
 80a1b86:	dd0c      	ble.n	80a1ba2 <__adddf3+0x52>
 80a1b88:	442c      	add	r4, r5
 80a1b8a:	ea80 0202 	eor.w	r2, r0, r2
 80a1b8e:	ea81 0303 	eor.w	r3, r1, r3
 80a1b92:	ea82 0000 	eor.w	r0, r2, r0
 80a1b96:	ea83 0101 	eor.w	r1, r3, r1
 80a1b9a:	ea80 0202 	eor.w	r2, r0, r2
 80a1b9e:	ea81 0303 	eor.w	r3, r1, r3
 80a1ba2:	2d36      	cmp	r5, #54	; 0x36
 80a1ba4:	bf88      	it	hi
 80a1ba6:	bd30      	pophi	{r4, r5, pc}
 80a1ba8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1bac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1bb0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1bb4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a1bb8:	d002      	beq.n	80a1bc0 <__adddf3+0x70>
 80a1bba:	4240      	negs	r0, r0
 80a1bbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1bc0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1bc4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1bc8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1bcc:	d002      	beq.n	80a1bd4 <__adddf3+0x84>
 80a1bce:	4252      	negs	r2, r2
 80a1bd0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1bd4:	ea94 0f05 	teq	r4, r5
 80a1bd8:	f000 80a7 	beq.w	80a1d2a <__adddf3+0x1da>
 80a1bdc:	f1a4 0401 	sub.w	r4, r4, #1
 80a1be0:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1be4:	db0d      	blt.n	80a1c02 <__adddf3+0xb2>
 80a1be6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a1bea:	fa22 f205 	lsr.w	r2, r2, r5
 80a1bee:	1880      	adds	r0, r0, r2
 80a1bf0:	f141 0100 	adc.w	r1, r1, #0
 80a1bf4:	fa03 f20e 	lsl.w	r2, r3, lr
 80a1bf8:	1880      	adds	r0, r0, r2
 80a1bfa:	fa43 f305 	asr.w	r3, r3, r5
 80a1bfe:	4159      	adcs	r1, r3
 80a1c00:	e00e      	b.n	80a1c20 <__adddf3+0xd0>
 80a1c02:	f1a5 0520 	sub.w	r5, r5, #32
 80a1c06:	f10e 0e20 	add.w	lr, lr, #32
 80a1c0a:	2a01      	cmp	r2, #1
 80a1c0c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a1c10:	bf28      	it	cs
 80a1c12:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a1c16:	fa43 f305 	asr.w	r3, r3, r5
 80a1c1a:	18c0      	adds	r0, r0, r3
 80a1c1c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a1c20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1c24:	d507      	bpl.n	80a1c36 <__adddf3+0xe6>
 80a1c26:	f04f 0e00 	mov.w	lr, #0
 80a1c2a:	f1dc 0c00 	rsbs	ip, ip, #0
 80a1c2e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a1c32:	eb6e 0101 	sbc.w	r1, lr, r1
 80a1c36:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a1c3a:	d31b      	bcc.n	80a1c74 <__adddf3+0x124>
 80a1c3c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a1c40:	d30c      	bcc.n	80a1c5c <__adddf3+0x10c>
 80a1c42:	0849      	lsrs	r1, r1, #1
 80a1c44:	ea5f 0030 	movs.w	r0, r0, rrx
 80a1c48:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a1c4c:	f104 0401 	add.w	r4, r4, #1
 80a1c50:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1c54:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a1c58:	f080 809a 	bcs.w	80a1d90 <__adddf3+0x240>
 80a1c5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1c60:	bf08      	it	eq
 80a1c62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1c66:	f150 0000 	adcs.w	r0, r0, #0
 80a1c6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1c6e:	ea41 0105 	orr.w	r1, r1, r5
 80a1c72:	bd30      	pop	{r4, r5, pc}
 80a1c74:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a1c78:	4140      	adcs	r0, r0
 80a1c7a:	eb41 0101 	adc.w	r1, r1, r1
 80a1c7e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1c82:	f1a4 0401 	sub.w	r4, r4, #1
 80a1c86:	d1e9      	bne.n	80a1c5c <__adddf3+0x10c>
 80a1c88:	f091 0f00 	teq	r1, #0
 80a1c8c:	bf04      	itt	eq
 80a1c8e:	4601      	moveq	r1, r0
 80a1c90:	2000      	moveq	r0, #0
 80a1c92:	fab1 f381 	clz	r3, r1
 80a1c96:	bf08      	it	eq
 80a1c98:	3320      	addeq	r3, #32
 80a1c9a:	f1a3 030b 	sub.w	r3, r3, #11
 80a1c9e:	f1b3 0220 	subs.w	r2, r3, #32
 80a1ca2:	da0c      	bge.n	80a1cbe <__adddf3+0x16e>
 80a1ca4:	320c      	adds	r2, #12
 80a1ca6:	dd08      	ble.n	80a1cba <__adddf3+0x16a>
 80a1ca8:	f102 0c14 	add.w	ip, r2, #20
 80a1cac:	f1c2 020c 	rsb	r2, r2, #12
 80a1cb0:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1cb4:	fa21 f102 	lsr.w	r1, r1, r2
 80a1cb8:	e00c      	b.n	80a1cd4 <__adddf3+0x184>
 80a1cba:	f102 0214 	add.w	r2, r2, #20
 80a1cbe:	bfd8      	it	le
 80a1cc0:	f1c2 0c20 	rsble	ip, r2, #32
 80a1cc4:	fa01 f102 	lsl.w	r1, r1, r2
 80a1cc8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a1ccc:	bfdc      	itt	le
 80a1cce:	ea41 010c 	orrle.w	r1, r1, ip
 80a1cd2:	4090      	lslle	r0, r2
 80a1cd4:	1ae4      	subs	r4, r4, r3
 80a1cd6:	bfa2      	ittt	ge
 80a1cd8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a1cdc:	4329      	orrge	r1, r5
 80a1cde:	bd30      	popge	{r4, r5, pc}
 80a1ce0:	ea6f 0404 	mvn.w	r4, r4
 80a1ce4:	3c1f      	subs	r4, #31
 80a1ce6:	da1c      	bge.n	80a1d22 <__adddf3+0x1d2>
 80a1ce8:	340c      	adds	r4, #12
 80a1cea:	dc0e      	bgt.n	80a1d0a <__adddf3+0x1ba>
 80a1cec:	f104 0414 	add.w	r4, r4, #20
 80a1cf0:	f1c4 0220 	rsb	r2, r4, #32
 80a1cf4:	fa20 f004 	lsr.w	r0, r0, r4
 80a1cf8:	fa01 f302 	lsl.w	r3, r1, r2
 80a1cfc:	ea40 0003 	orr.w	r0, r0, r3
 80a1d00:	fa21 f304 	lsr.w	r3, r1, r4
 80a1d04:	ea45 0103 	orr.w	r1, r5, r3
 80a1d08:	bd30      	pop	{r4, r5, pc}
 80a1d0a:	f1c4 040c 	rsb	r4, r4, #12
 80a1d0e:	f1c4 0220 	rsb	r2, r4, #32
 80a1d12:	fa20 f002 	lsr.w	r0, r0, r2
 80a1d16:	fa01 f304 	lsl.w	r3, r1, r4
 80a1d1a:	ea40 0003 	orr.w	r0, r0, r3
 80a1d1e:	4629      	mov	r1, r5
 80a1d20:	bd30      	pop	{r4, r5, pc}
 80a1d22:	fa21 f004 	lsr.w	r0, r1, r4
 80a1d26:	4629      	mov	r1, r5
 80a1d28:	bd30      	pop	{r4, r5, pc}
 80a1d2a:	f094 0f00 	teq	r4, #0
 80a1d2e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a1d32:	bf06      	itte	eq
 80a1d34:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a1d38:	3401      	addeq	r4, #1
 80a1d3a:	3d01      	subne	r5, #1
 80a1d3c:	e74e      	b.n	80a1bdc <__adddf3+0x8c>
 80a1d3e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1d42:	bf18      	it	ne
 80a1d44:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1d48:	d029      	beq.n	80a1d9e <__adddf3+0x24e>
 80a1d4a:	ea94 0f05 	teq	r4, r5
 80a1d4e:	bf08      	it	eq
 80a1d50:	ea90 0f02 	teqeq	r0, r2
 80a1d54:	d005      	beq.n	80a1d62 <__adddf3+0x212>
 80a1d56:	ea54 0c00 	orrs.w	ip, r4, r0
 80a1d5a:	bf04      	itt	eq
 80a1d5c:	4619      	moveq	r1, r3
 80a1d5e:	4610      	moveq	r0, r2
 80a1d60:	bd30      	pop	{r4, r5, pc}
 80a1d62:	ea91 0f03 	teq	r1, r3
 80a1d66:	bf1e      	ittt	ne
 80a1d68:	2100      	movne	r1, #0
 80a1d6a:	2000      	movne	r0, #0
 80a1d6c:	bd30      	popne	{r4, r5, pc}
 80a1d6e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a1d72:	d105      	bne.n	80a1d80 <__adddf3+0x230>
 80a1d74:	0040      	lsls	r0, r0, #1
 80a1d76:	4149      	adcs	r1, r1
 80a1d78:	bf28      	it	cs
 80a1d7a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a1d7e:	bd30      	pop	{r4, r5, pc}
 80a1d80:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1d84:	bf3c      	itt	cc
 80a1d86:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a1d8a:	bd30      	popcc	{r4, r5, pc}
 80a1d8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1d90:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1d94:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1d98:	f04f 0000 	mov.w	r0, #0
 80a1d9c:	bd30      	pop	{r4, r5, pc}
 80a1d9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1da2:	bf1a      	itte	ne
 80a1da4:	4619      	movne	r1, r3
 80a1da6:	4610      	movne	r0, r2
 80a1da8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a1dac:	bf1c      	itt	ne
 80a1dae:	460b      	movne	r3, r1
 80a1db0:	4602      	movne	r2, r0
 80a1db2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1db6:	bf06      	itte	eq
 80a1db8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a1dbc:	ea91 0f03 	teqeq	r1, r3
 80a1dc0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1dc4:	bd30      	pop	{r4, r5, pc}
 80a1dc6:	bf00      	nop

080a1dc8 <__aeabi_ui2d>:
 80a1dc8:	f090 0f00 	teq	r0, #0
 80a1dcc:	bf04      	itt	eq
 80a1dce:	2100      	moveq	r1, #0
 80a1dd0:	4770      	bxeq	lr
 80a1dd2:	b530      	push	{r4, r5, lr}
 80a1dd4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1dd8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1ddc:	f04f 0500 	mov.w	r5, #0
 80a1de0:	f04f 0100 	mov.w	r1, #0
 80a1de4:	e750      	b.n	80a1c88 <__adddf3+0x138>
 80a1de6:	bf00      	nop

080a1de8 <__aeabi_i2d>:
 80a1de8:	f090 0f00 	teq	r0, #0
 80a1dec:	bf04      	itt	eq
 80a1dee:	2100      	moveq	r1, #0
 80a1df0:	4770      	bxeq	lr
 80a1df2:	b530      	push	{r4, r5, lr}
 80a1df4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1df8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1dfc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a1e00:	bf48      	it	mi
 80a1e02:	4240      	negmi	r0, r0
 80a1e04:	f04f 0100 	mov.w	r1, #0
 80a1e08:	e73e      	b.n	80a1c88 <__adddf3+0x138>
 80a1e0a:	bf00      	nop

080a1e0c <__aeabi_f2d>:
 80a1e0c:	0042      	lsls	r2, r0, #1
 80a1e0e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a1e12:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1e16:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a1e1a:	bf1f      	itttt	ne
 80a1e1c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a1e20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1e24:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a1e28:	4770      	bxne	lr
 80a1e2a:	f092 0f00 	teq	r2, #0
 80a1e2e:	bf14      	ite	ne
 80a1e30:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1e34:	4770      	bxeq	lr
 80a1e36:	b530      	push	{r4, r5, lr}
 80a1e38:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1e3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1e40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1e44:	e720      	b.n	80a1c88 <__adddf3+0x138>
 80a1e46:	bf00      	nop

080a1e48 <__aeabi_ul2d>:
 80a1e48:	ea50 0201 	orrs.w	r2, r0, r1
 80a1e4c:	bf08      	it	eq
 80a1e4e:	4770      	bxeq	lr
 80a1e50:	b530      	push	{r4, r5, lr}
 80a1e52:	f04f 0500 	mov.w	r5, #0
 80a1e56:	e00a      	b.n	80a1e6e <__aeabi_l2d+0x16>

080a1e58 <__aeabi_l2d>:
 80a1e58:	ea50 0201 	orrs.w	r2, r0, r1
 80a1e5c:	bf08      	it	eq
 80a1e5e:	4770      	bxeq	lr
 80a1e60:	b530      	push	{r4, r5, lr}
 80a1e62:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a1e66:	d502      	bpl.n	80a1e6e <__aeabi_l2d+0x16>
 80a1e68:	4240      	negs	r0, r0
 80a1e6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1e6e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1e72:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1e76:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a1e7a:	f43f aedc 	beq.w	80a1c36 <__adddf3+0xe6>
 80a1e7e:	f04f 0203 	mov.w	r2, #3
 80a1e82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1e86:	bf18      	it	ne
 80a1e88:	3203      	addne	r2, #3
 80a1e8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1e8e:	bf18      	it	ne
 80a1e90:	3203      	addne	r2, #3
 80a1e92:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a1e96:	f1c2 0320 	rsb	r3, r2, #32
 80a1e9a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1e9e:	fa20 f002 	lsr.w	r0, r0, r2
 80a1ea2:	fa01 fe03 	lsl.w	lr, r1, r3
 80a1ea6:	ea40 000e 	orr.w	r0, r0, lr
 80a1eaa:	fa21 f102 	lsr.w	r1, r1, r2
 80a1eae:	4414      	add	r4, r2
 80a1eb0:	e6c1      	b.n	80a1c36 <__adddf3+0xe6>
 80a1eb2:	bf00      	nop

080a1eb4 <__aeabi_dmul>:
 80a1eb4:	b570      	push	{r4, r5, r6, lr}
 80a1eb6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1eba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1ebe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1ec2:	bf1d      	ittte	ne
 80a1ec4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1ec8:	ea94 0f0c 	teqne	r4, ip
 80a1ecc:	ea95 0f0c 	teqne	r5, ip
 80a1ed0:	f000 f8de 	bleq	80a2090 <__aeabi_dmul+0x1dc>
 80a1ed4:	442c      	add	r4, r5
 80a1ed6:	ea81 0603 	eor.w	r6, r1, r3
 80a1eda:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a1ede:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a1ee2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a1ee6:	bf18      	it	ne
 80a1ee8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a1eec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1ef0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a1ef4:	d038      	beq.n	80a1f68 <__aeabi_dmul+0xb4>
 80a1ef6:	fba0 ce02 	umull	ip, lr, r0, r2
 80a1efa:	f04f 0500 	mov.w	r5, #0
 80a1efe:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a1f02:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a1f06:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a1f0a:	f04f 0600 	mov.w	r6, #0
 80a1f0e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a1f12:	f09c 0f00 	teq	ip, #0
 80a1f16:	bf18      	it	ne
 80a1f18:	f04e 0e01 	orrne.w	lr, lr, #1
 80a1f1c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a1f20:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a1f24:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a1f28:	d204      	bcs.n	80a1f34 <__aeabi_dmul+0x80>
 80a1f2a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a1f2e:	416d      	adcs	r5, r5
 80a1f30:	eb46 0606 	adc.w	r6, r6, r6
 80a1f34:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a1f38:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a1f3c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a1f40:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a1f44:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a1f48:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1f4c:	bf88      	it	hi
 80a1f4e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a1f52:	d81e      	bhi.n	80a1f92 <__aeabi_dmul+0xde>
 80a1f54:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a1f58:	bf08      	it	eq
 80a1f5a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a1f5e:	f150 0000 	adcs.w	r0, r0, #0
 80a1f62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1f66:	bd70      	pop	{r4, r5, r6, pc}
 80a1f68:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a1f6c:	ea46 0101 	orr.w	r1, r6, r1
 80a1f70:	ea40 0002 	orr.w	r0, r0, r2
 80a1f74:	ea81 0103 	eor.w	r1, r1, r3
 80a1f78:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a1f7c:	bfc2      	ittt	gt
 80a1f7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1f82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a1f86:	bd70      	popgt	{r4, r5, r6, pc}
 80a1f88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1f8c:	f04f 0e00 	mov.w	lr, #0
 80a1f90:	3c01      	subs	r4, #1
 80a1f92:	f300 80ab 	bgt.w	80a20ec <__aeabi_dmul+0x238>
 80a1f96:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a1f9a:	bfde      	ittt	le
 80a1f9c:	2000      	movle	r0, #0
 80a1f9e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a1fa2:	bd70      	pople	{r4, r5, r6, pc}
 80a1fa4:	f1c4 0400 	rsb	r4, r4, #0
 80a1fa8:	3c20      	subs	r4, #32
 80a1faa:	da35      	bge.n	80a2018 <__aeabi_dmul+0x164>
 80a1fac:	340c      	adds	r4, #12
 80a1fae:	dc1b      	bgt.n	80a1fe8 <__aeabi_dmul+0x134>
 80a1fb0:	f104 0414 	add.w	r4, r4, #20
 80a1fb4:	f1c4 0520 	rsb	r5, r4, #32
 80a1fb8:	fa00 f305 	lsl.w	r3, r0, r5
 80a1fbc:	fa20 f004 	lsr.w	r0, r0, r4
 80a1fc0:	fa01 f205 	lsl.w	r2, r1, r5
 80a1fc4:	ea40 0002 	orr.w	r0, r0, r2
 80a1fc8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a1fcc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1fd0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1fd4:	fa21 f604 	lsr.w	r6, r1, r4
 80a1fd8:	eb42 0106 	adc.w	r1, r2, r6
 80a1fdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1fe0:	bf08      	it	eq
 80a1fe2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1fe6:	bd70      	pop	{r4, r5, r6, pc}
 80a1fe8:	f1c4 040c 	rsb	r4, r4, #12
 80a1fec:	f1c4 0520 	rsb	r5, r4, #32
 80a1ff0:	fa00 f304 	lsl.w	r3, r0, r4
 80a1ff4:	fa20 f005 	lsr.w	r0, r0, r5
 80a1ff8:	fa01 f204 	lsl.w	r2, r1, r4
 80a1ffc:	ea40 0002 	orr.w	r0, r0, r2
 80a2000:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2004:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2008:	f141 0100 	adc.w	r1, r1, #0
 80a200c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2010:	bf08      	it	eq
 80a2012:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2016:	bd70      	pop	{r4, r5, r6, pc}
 80a2018:	f1c4 0520 	rsb	r5, r4, #32
 80a201c:	fa00 f205 	lsl.w	r2, r0, r5
 80a2020:	ea4e 0e02 	orr.w	lr, lr, r2
 80a2024:	fa20 f304 	lsr.w	r3, r0, r4
 80a2028:	fa01 f205 	lsl.w	r2, r1, r5
 80a202c:	ea43 0302 	orr.w	r3, r3, r2
 80a2030:	fa21 f004 	lsr.w	r0, r1, r4
 80a2034:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2038:	fa21 f204 	lsr.w	r2, r1, r4
 80a203c:	ea20 0002 	bic.w	r0, r0, r2
 80a2040:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a2044:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2048:	bf08      	it	eq
 80a204a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a204e:	bd70      	pop	{r4, r5, r6, pc}
 80a2050:	f094 0f00 	teq	r4, #0
 80a2054:	d10f      	bne.n	80a2076 <__aeabi_dmul+0x1c2>
 80a2056:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a205a:	0040      	lsls	r0, r0, #1
 80a205c:	eb41 0101 	adc.w	r1, r1, r1
 80a2060:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2064:	bf08      	it	eq
 80a2066:	3c01      	subeq	r4, #1
 80a2068:	d0f7      	beq.n	80a205a <__aeabi_dmul+0x1a6>
 80a206a:	ea41 0106 	orr.w	r1, r1, r6
 80a206e:	f095 0f00 	teq	r5, #0
 80a2072:	bf18      	it	ne
 80a2074:	4770      	bxne	lr
 80a2076:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a207a:	0052      	lsls	r2, r2, #1
 80a207c:	eb43 0303 	adc.w	r3, r3, r3
 80a2080:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2084:	bf08      	it	eq
 80a2086:	3d01      	subeq	r5, #1
 80a2088:	d0f7      	beq.n	80a207a <__aeabi_dmul+0x1c6>
 80a208a:	ea43 0306 	orr.w	r3, r3, r6
 80a208e:	4770      	bx	lr
 80a2090:	ea94 0f0c 	teq	r4, ip
 80a2094:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2098:	bf18      	it	ne
 80a209a:	ea95 0f0c 	teqne	r5, ip
 80a209e:	d00c      	beq.n	80a20ba <__aeabi_dmul+0x206>
 80a20a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a20a4:	bf18      	it	ne
 80a20a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a20aa:	d1d1      	bne.n	80a2050 <__aeabi_dmul+0x19c>
 80a20ac:	ea81 0103 	eor.w	r1, r1, r3
 80a20b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a20b4:	f04f 0000 	mov.w	r0, #0
 80a20b8:	bd70      	pop	{r4, r5, r6, pc}
 80a20ba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a20be:	bf06      	itte	eq
 80a20c0:	4610      	moveq	r0, r2
 80a20c2:	4619      	moveq	r1, r3
 80a20c4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a20c8:	d019      	beq.n	80a20fe <__aeabi_dmul+0x24a>
 80a20ca:	ea94 0f0c 	teq	r4, ip
 80a20ce:	d102      	bne.n	80a20d6 <__aeabi_dmul+0x222>
 80a20d0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a20d4:	d113      	bne.n	80a20fe <__aeabi_dmul+0x24a>
 80a20d6:	ea95 0f0c 	teq	r5, ip
 80a20da:	d105      	bne.n	80a20e8 <__aeabi_dmul+0x234>
 80a20dc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a20e0:	bf1c      	itt	ne
 80a20e2:	4610      	movne	r0, r2
 80a20e4:	4619      	movne	r1, r3
 80a20e6:	d10a      	bne.n	80a20fe <__aeabi_dmul+0x24a>
 80a20e8:	ea81 0103 	eor.w	r1, r1, r3
 80a20ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a20f0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a20f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a20f8:	f04f 0000 	mov.w	r0, #0
 80a20fc:	bd70      	pop	{r4, r5, r6, pc}
 80a20fe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2102:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2106:	bd70      	pop	{r4, r5, r6, pc}

080a2108 <__aeabi_ddiv>:
 80a2108:	b570      	push	{r4, r5, r6, lr}
 80a210a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a210e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2112:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2116:	bf1d      	ittte	ne
 80a2118:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a211c:	ea94 0f0c 	teqne	r4, ip
 80a2120:	ea95 0f0c 	teqne	r5, ip
 80a2124:	f000 f8a7 	bleq	80a2276 <__aeabi_ddiv+0x16e>
 80a2128:	eba4 0405 	sub.w	r4, r4, r5
 80a212c:	ea81 0e03 	eor.w	lr, r1, r3
 80a2130:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2134:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2138:	f000 8088 	beq.w	80a224c <__aeabi_ddiv+0x144>
 80a213c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2140:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2144:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2148:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a214c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2150:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2154:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2158:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a215c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2160:	429d      	cmp	r5, r3
 80a2162:	bf08      	it	eq
 80a2164:	4296      	cmpeq	r6, r2
 80a2166:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a216a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a216e:	d202      	bcs.n	80a2176 <__aeabi_ddiv+0x6e>
 80a2170:	085b      	lsrs	r3, r3, #1
 80a2172:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2176:	1ab6      	subs	r6, r6, r2
 80a2178:	eb65 0503 	sbc.w	r5, r5, r3
 80a217c:	085b      	lsrs	r3, r3, #1
 80a217e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2182:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2186:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a218a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a218e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2192:	bf22      	ittt	cs
 80a2194:	1ab6      	subcs	r6, r6, r2
 80a2196:	4675      	movcs	r5, lr
 80a2198:	ea40 000c 	orrcs.w	r0, r0, ip
 80a219c:	085b      	lsrs	r3, r3, #1
 80a219e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a21a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a21a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a21aa:	bf22      	ittt	cs
 80a21ac:	1ab6      	subcs	r6, r6, r2
 80a21ae:	4675      	movcs	r5, lr
 80a21b0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a21b4:	085b      	lsrs	r3, r3, #1
 80a21b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a21ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80a21be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a21c2:	bf22      	ittt	cs
 80a21c4:	1ab6      	subcs	r6, r6, r2
 80a21c6:	4675      	movcs	r5, lr
 80a21c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a21cc:	085b      	lsrs	r3, r3, #1
 80a21ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80a21d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a21d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a21da:	bf22      	ittt	cs
 80a21dc:	1ab6      	subcs	r6, r6, r2
 80a21de:	4675      	movcs	r5, lr
 80a21e0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a21e4:	ea55 0e06 	orrs.w	lr, r5, r6
 80a21e8:	d018      	beq.n	80a221c <__aeabi_ddiv+0x114>
 80a21ea:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a21ee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a21f2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a21f6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a21fa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a21fe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a2202:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2206:	d1c0      	bne.n	80a218a <__aeabi_ddiv+0x82>
 80a2208:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a220c:	d10b      	bne.n	80a2226 <__aeabi_ddiv+0x11e>
 80a220e:	ea41 0100 	orr.w	r1, r1, r0
 80a2212:	f04f 0000 	mov.w	r0, #0
 80a2216:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a221a:	e7b6      	b.n	80a218a <__aeabi_ddiv+0x82>
 80a221c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2220:	bf04      	itt	eq
 80a2222:	4301      	orreq	r1, r0
 80a2224:	2000      	moveq	r0, #0
 80a2226:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a222a:	bf88      	it	hi
 80a222c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2230:	f63f aeaf 	bhi.w	80a1f92 <__aeabi_dmul+0xde>
 80a2234:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2238:	bf04      	itt	eq
 80a223a:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a223e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2242:	f150 0000 	adcs.w	r0, r0, #0
 80a2246:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a224a:	bd70      	pop	{r4, r5, r6, pc}
 80a224c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2250:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2254:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a2258:	bfc2      	ittt	gt
 80a225a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a225e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2262:	bd70      	popgt	{r4, r5, r6, pc}
 80a2264:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2268:	f04f 0e00 	mov.w	lr, #0
 80a226c:	3c01      	subs	r4, #1
 80a226e:	e690      	b.n	80a1f92 <__aeabi_dmul+0xde>
 80a2270:	ea45 0e06 	orr.w	lr, r5, r6
 80a2274:	e68d      	b.n	80a1f92 <__aeabi_dmul+0xde>
 80a2276:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a227a:	ea94 0f0c 	teq	r4, ip
 80a227e:	bf08      	it	eq
 80a2280:	ea95 0f0c 	teqeq	r5, ip
 80a2284:	f43f af3b 	beq.w	80a20fe <__aeabi_dmul+0x24a>
 80a2288:	ea94 0f0c 	teq	r4, ip
 80a228c:	d10a      	bne.n	80a22a4 <__aeabi_ddiv+0x19c>
 80a228e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2292:	f47f af34 	bne.w	80a20fe <__aeabi_dmul+0x24a>
 80a2296:	ea95 0f0c 	teq	r5, ip
 80a229a:	f47f af25 	bne.w	80a20e8 <__aeabi_dmul+0x234>
 80a229e:	4610      	mov	r0, r2
 80a22a0:	4619      	mov	r1, r3
 80a22a2:	e72c      	b.n	80a20fe <__aeabi_dmul+0x24a>
 80a22a4:	ea95 0f0c 	teq	r5, ip
 80a22a8:	d106      	bne.n	80a22b8 <__aeabi_ddiv+0x1b0>
 80a22aa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a22ae:	f43f aefd 	beq.w	80a20ac <__aeabi_dmul+0x1f8>
 80a22b2:	4610      	mov	r0, r2
 80a22b4:	4619      	mov	r1, r3
 80a22b6:	e722      	b.n	80a20fe <__aeabi_dmul+0x24a>
 80a22b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a22bc:	bf18      	it	ne
 80a22be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a22c2:	f47f aec5 	bne.w	80a2050 <__aeabi_dmul+0x19c>
 80a22c6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a22ca:	f47f af0d 	bne.w	80a20e8 <__aeabi_dmul+0x234>
 80a22ce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a22d2:	f47f aeeb 	bne.w	80a20ac <__aeabi_dmul+0x1f8>
 80a22d6:	e712      	b.n	80a20fe <__aeabi_dmul+0x24a>

080a22d8 <__gedf2>:
 80a22d8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a22dc:	e006      	b.n	80a22ec <__cmpdf2+0x4>
 80a22de:	bf00      	nop

080a22e0 <__ledf2>:
 80a22e0:	f04f 0c01 	mov.w	ip, #1
 80a22e4:	e002      	b.n	80a22ec <__cmpdf2+0x4>
 80a22e6:	bf00      	nop

080a22e8 <__cmpdf2>:
 80a22e8:	f04f 0c01 	mov.w	ip, #1
 80a22ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a22f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a22f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a22f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a22fc:	bf18      	it	ne
 80a22fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a2302:	d01b      	beq.n	80a233c <__cmpdf2+0x54>
 80a2304:	b001      	add	sp, #4
 80a2306:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a230a:	bf0c      	ite	eq
 80a230c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a2310:	ea91 0f03 	teqne	r1, r3
 80a2314:	bf02      	ittt	eq
 80a2316:	ea90 0f02 	teqeq	r0, r2
 80a231a:	2000      	moveq	r0, #0
 80a231c:	4770      	bxeq	lr
 80a231e:	f110 0f00 	cmn.w	r0, #0
 80a2322:	ea91 0f03 	teq	r1, r3
 80a2326:	bf58      	it	pl
 80a2328:	4299      	cmppl	r1, r3
 80a232a:	bf08      	it	eq
 80a232c:	4290      	cmpeq	r0, r2
 80a232e:	bf2c      	ite	cs
 80a2330:	17d8      	asrcs	r0, r3, #31
 80a2332:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a2336:	f040 0001 	orr.w	r0, r0, #1
 80a233a:	4770      	bx	lr
 80a233c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2340:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2344:	d102      	bne.n	80a234c <__cmpdf2+0x64>
 80a2346:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a234a:	d107      	bne.n	80a235c <__cmpdf2+0x74>
 80a234c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2350:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2354:	d1d6      	bne.n	80a2304 <__cmpdf2+0x1c>
 80a2356:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a235a:	d0d3      	beq.n	80a2304 <__cmpdf2+0x1c>
 80a235c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2360:	4770      	bx	lr
 80a2362:	bf00      	nop

080a2364 <__aeabi_cdrcmple>:
 80a2364:	4684      	mov	ip, r0
 80a2366:	4610      	mov	r0, r2
 80a2368:	4662      	mov	r2, ip
 80a236a:	468c      	mov	ip, r1
 80a236c:	4619      	mov	r1, r3
 80a236e:	4663      	mov	r3, ip
 80a2370:	e000      	b.n	80a2374 <__aeabi_cdcmpeq>
 80a2372:	bf00      	nop

080a2374 <__aeabi_cdcmpeq>:
 80a2374:	b501      	push	{r0, lr}
 80a2376:	f7ff ffb7 	bl	80a22e8 <__cmpdf2>
 80a237a:	2800      	cmp	r0, #0
 80a237c:	bf48      	it	mi
 80a237e:	f110 0f00 	cmnmi.w	r0, #0
 80a2382:	bd01      	pop	{r0, pc}

080a2384 <__aeabi_dcmpeq>:
 80a2384:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2388:	f7ff fff4 	bl	80a2374 <__aeabi_cdcmpeq>
 80a238c:	bf0c      	ite	eq
 80a238e:	2001      	moveq	r0, #1
 80a2390:	2000      	movne	r0, #0
 80a2392:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2396:	bf00      	nop

080a2398 <__aeabi_dcmplt>:
 80a2398:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a239c:	f7ff ffea 	bl	80a2374 <__aeabi_cdcmpeq>
 80a23a0:	bf34      	ite	cc
 80a23a2:	2001      	movcc	r0, #1
 80a23a4:	2000      	movcs	r0, #0
 80a23a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a23aa:	bf00      	nop

080a23ac <__aeabi_dcmple>:
 80a23ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a23b0:	f7ff ffe0 	bl	80a2374 <__aeabi_cdcmpeq>
 80a23b4:	bf94      	ite	ls
 80a23b6:	2001      	movls	r0, #1
 80a23b8:	2000      	movhi	r0, #0
 80a23ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80a23be:	bf00      	nop

080a23c0 <__aeabi_dcmpge>:
 80a23c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a23c4:	f7ff ffce 	bl	80a2364 <__aeabi_cdrcmple>
 80a23c8:	bf94      	ite	ls
 80a23ca:	2001      	movls	r0, #1
 80a23cc:	2000      	movhi	r0, #0
 80a23ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80a23d2:	bf00      	nop

080a23d4 <__aeabi_dcmpgt>:
 80a23d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a23d8:	f7ff ffc4 	bl	80a2364 <__aeabi_cdrcmple>
 80a23dc:	bf34      	ite	cc
 80a23de:	2001      	movcc	r0, #1
 80a23e0:	2000      	movcs	r0, #0
 80a23e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a23e6:	bf00      	nop

080a23e8 <__aeabi_d2f>:
 80a23e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a23ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a23f0:	bf24      	itt	cs
 80a23f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a23f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a23fa:	d90d      	bls.n	80a2418 <__aeabi_d2f+0x30>
 80a23fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2400:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a2404:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a2408:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a240c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a2410:	bf08      	it	eq
 80a2412:	f020 0001 	biceq.w	r0, r0, #1
 80a2416:	4770      	bx	lr
 80a2418:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a241c:	d121      	bne.n	80a2462 <__aeabi_d2f+0x7a>
 80a241e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a2422:	bfbc      	itt	lt
 80a2424:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a2428:	4770      	bxlt	lr
 80a242a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a242e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a2432:	f1c2 0218 	rsb	r2, r2, #24
 80a2436:	f1c2 0c20 	rsb	ip, r2, #32
 80a243a:	fa10 f30c 	lsls.w	r3, r0, ip
 80a243e:	fa20 f002 	lsr.w	r0, r0, r2
 80a2442:	bf18      	it	ne
 80a2444:	f040 0001 	orrne.w	r0, r0, #1
 80a2448:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a244c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a2450:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a2454:	ea40 000c 	orr.w	r0, r0, ip
 80a2458:	fa23 f302 	lsr.w	r3, r3, r2
 80a245c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a2460:	e7cc      	b.n	80a23fc <__aeabi_d2f+0x14>
 80a2462:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a2466:	d107      	bne.n	80a2478 <__aeabi_d2f+0x90>
 80a2468:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a246c:	bf1e      	ittt	ne
 80a246e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a2472:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a2476:	4770      	bxne	lr
 80a2478:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a247c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2480:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2484:	4770      	bx	lr
 80a2486:	bf00      	nop

080a2488 <__aeabi_frsub>:
 80a2488:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a248c:	e002      	b.n	80a2494 <__addsf3>
 80a248e:	bf00      	nop

080a2490 <__aeabi_fsub>:
 80a2490:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a2494 <__addsf3>:
 80a2494:	0042      	lsls	r2, r0, #1
 80a2496:	bf1f      	itttt	ne
 80a2498:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a249c:	ea92 0f03 	teqne	r2, r3
 80a24a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a24a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a24a8:	d06a      	beq.n	80a2580 <__addsf3+0xec>
 80a24aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a24ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a24b2:	bfc1      	itttt	gt
 80a24b4:	18d2      	addgt	r2, r2, r3
 80a24b6:	4041      	eorgt	r1, r0
 80a24b8:	4048      	eorgt	r0, r1
 80a24ba:	4041      	eorgt	r1, r0
 80a24bc:	bfb8      	it	lt
 80a24be:	425b      	neglt	r3, r3
 80a24c0:	2b19      	cmp	r3, #25
 80a24c2:	bf88      	it	hi
 80a24c4:	4770      	bxhi	lr
 80a24c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a24ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a24ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a24d2:	bf18      	it	ne
 80a24d4:	4240      	negne	r0, r0
 80a24d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a24da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a24de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a24e2:	bf18      	it	ne
 80a24e4:	4249      	negne	r1, r1
 80a24e6:	ea92 0f03 	teq	r2, r3
 80a24ea:	d03f      	beq.n	80a256c <__addsf3+0xd8>
 80a24ec:	f1a2 0201 	sub.w	r2, r2, #1
 80a24f0:	fa41 fc03 	asr.w	ip, r1, r3
 80a24f4:	eb10 000c 	adds.w	r0, r0, ip
 80a24f8:	f1c3 0320 	rsb	r3, r3, #32
 80a24fc:	fa01 f103 	lsl.w	r1, r1, r3
 80a2500:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2504:	d502      	bpl.n	80a250c <__addsf3+0x78>
 80a2506:	4249      	negs	r1, r1
 80a2508:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a250c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a2510:	d313      	bcc.n	80a253a <__addsf3+0xa6>
 80a2512:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a2516:	d306      	bcc.n	80a2526 <__addsf3+0x92>
 80a2518:	0840      	lsrs	r0, r0, #1
 80a251a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a251e:	f102 0201 	add.w	r2, r2, #1
 80a2522:	2afe      	cmp	r2, #254	; 0xfe
 80a2524:	d251      	bcs.n	80a25ca <__addsf3+0x136>
 80a2526:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a252a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a252e:	bf08      	it	eq
 80a2530:	f020 0001 	biceq.w	r0, r0, #1
 80a2534:	ea40 0003 	orr.w	r0, r0, r3
 80a2538:	4770      	bx	lr
 80a253a:	0049      	lsls	r1, r1, #1
 80a253c:	eb40 0000 	adc.w	r0, r0, r0
 80a2540:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a2544:	f1a2 0201 	sub.w	r2, r2, #1
 80a2548:	d1ed      	bne.n	80a2526 <__addsf3+0x92>
 80a254a:	fab0 fc80 	clz	ip, r0
 80a254e:	f1ac 0c08 	sub.w	ip, ip, #8
 80a2552:	ebb2 020c 	subs.w	r2, r2, ip
 80a2556:	fa00 f00c 	lsl.w	r0, r0, ip
 80a255a:	bfaa      	itet	ge
 80a255c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a2560:	4252      	neglt	r2, r2
 80a2562:	4318      	orrge	r0, r3
 80a2564:	bfbc      	itt	lt
 80a2566:	40d0      	lsrlt	r0, r2
 80a2568:	4318      	orrlt	r0, r3
 80a256a:	4770      	bx	lr
 80a256c:	f092 0f00 	teq	r2, #0
 80a2570:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a2574:	bf06      	itte	eq
 80a2576:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a257a:	3201      	addeq	r2, #1
 80a257c:	3b01      	subne	r3, #1
 80a257e:	e7b5      	b.n	80a24ec <__addsf3+0x58>
 80a2580:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2584:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2588:	bf18      	it	ne
 80a258a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a258e:	d021      	beq.n	80a25d4 <__addsf3+0x140>
 80a2590:	ea92 0f03 	teq	r2, r3
 80a2594:	d004      	beq.n	80a25a0 <__addsf3+0x10c>
 80a2596:	f092 0f00 	teq	r2, #0
 80a259a:	bf08      	it	eq
 80a259c:	4608      	moveq	r0, r1
 80a259e:	4770      	bx	lr
 80a25a0:	ea90 0f01 	teq	r0, r1
 80a25a4:	bf1c      	itt	ne
 80a25a6:	2000      	movne	r0, #0
 80a25a8:	4770      	bxne	lr
 80a25aa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a25ae:	d104      	bne.n	80a25ba <__addsf3+0x126>
 80a25b0:	0040      	lsls	r0, r0, #1
 80a25b2:	bf28      	it	cs
 80a25b4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a25b8:	4770      	bx	lr
 80a25ba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a25be:	bf3c      	itt	cc
 80a25c0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a25c4:	4770      	bxcc	lr
 80a25c6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a25ca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a25ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a25d2:	4770      	bx	lr
 80a25d4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a25d8:	bf16      	itet	ne
 80a25da:	4608      	movne	r0, r1
 80a25dc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a25e0:	4601      	movne	r1, r0
 80a25e2:	0242      	lsls	r2, r0, #9
 80a25e4:	bf06      	itte	eq
 80a25e6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a25ea:	ea90 0f01 	teqeq	r0, r1
 80a25ee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a25f2:	4770      	bx	lr

080a25f4 <__aeabi_ui2f>:
 80a25f4:	f04f 0300 	mov.w	r3, #0
 80a25f8:	e004      	b.n	80a2604 <__aeabi_i2f+0x8>
 80a25fa:	bf00      	nop

080a25fc <__aeabi_i2f>:
 80a25fc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a2600:	bf48      	it	mi
 80a2602:	4240      	negmi	r0, r0
 80a2604:	ea5f 0c00 	movs.w	ip, r0
 80a2608:	bf08      	it	eq
 80a260a:	4770      	bxeq	lr
 80a260c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a2610:	4601      	mov	r1, r0
 80a2612:	f04f 0000 	mov.w	r0, #0
 80a2616:	e01c      	b.n	80a2652 <__aeabi_l2f+0x2a>

080a2618 <__aeabi_ul2f>:
 80a2618:	ea50 0201 	orrs.w	r2, r0, r1
 80a261c:	bf08      	it	eq
 80a261e:	4770      	bxeq	lr
 80a2620:	f04f 0300 	mov.w	r3, #0
 80a2624:	e00a      	b.n	80a263c <__aeabi_l2f+0x14>
 80a2626:	bf00      	nop

080a2628 <__aeabi_l2f>:
 80a2628:	ea50 0201 	orrs.w	r2, r0, r1
 80a262c:	bf08      	it	eq
 80a262e:	4770      	bxeq	lr
 80a2630:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a2634:	d502      	bpl.n	80a263c <__aeabi_l2f+0x14>
 80a2636:	4240      	negs	r0, r0
 80a2638:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a263c:	ea5f 0c01 	movs.w	ip, r1
 80a2640:	bf02      	ittt	eq
 80a2642:	4684      	moveq	ip, r0
 80a2644:	4601      	moveq	r1, r0
 80a2646:	2000      	moveq	r0, #0
 80a2648:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a264c:	bf08      	it	eq
 80a264e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a2652:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a2656:	fabc f28c 	clz	r2, ip
 80a265a:	3a08      	subs	r2, #8
 80a265c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a2660:	db10      	blt.n	80a2684 <__aeabi_l2f+0x5c>
 80a2662:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2666:	4463      	add	r3, ip
 80a2668:	fa00 fc02 	lsl.w	ip, r0, r2
 80a266c:	f1c2 0220 	rsb	r2, r2, #32
 80a2670:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2674:	fa20 f202 	lsr.w	r2, r0, r2
 80a2678:	eb43 0002 	adc.w	r0, r3, r2
 80a267c:	bf08      	it	eq
 80a267e:	f020 0001 	biceq.w	r0, r0, #1
 80a2682:	4770      	bx	lr
 80a2684:	f102 0220 	add.w	r2, r2, #32
 80a2688:	fa01 fc02 	lsl.w	ip, r1, r2
 80a268c:	f1c2 0220 	rsb	r2, r2, #32
 80a2690:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a2694:	fa21 f202 	lsr.w	r2, r1, r2
 80a2698:	eb43 0002 	adc.w	r0, r3, r2
 80a269c:	bf08      	it	eq
 80a269e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a26a2:	4770      	bx	lr

080a26a4 <__gesf2>:
 80a26a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a26a8:	e006      	b.n	80a26b8 <__cmpsf2+0x4>
 80a26aa:	bf00      	nop

080a26ac <__lesf2>:
 80a26ac:	f04f 0c01 	mov.w	ip, #1
 80a26b0:	e002      	b.n	80a26b8 <__cmpsf2+0x4>
 80a26b2:	bf00      	nop

080a26b4 <__cmpsf2>:
 80a26b4:	f04f 0c01 	mov.w	ip, #1
 80a26b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a26bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a26c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a26c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a26c8:	bf18      	it	ne
 80a26ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a26ce:	d011      	beq.n	80a26f4 <__cmpsf2+0x40>
 80a26d0:	b001      	add	sp, #4
 80a26d2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a26d6:	bf18      	it	ne
 80a26d8:	ea90 0f01 	teqne	r0, r1
 80a26dc:	bf58      	it	pl
 80a26de:	ebb2 0003 	subspl.w	r0, r2, r3
 80a26e2:	bf88      	it	hi
 80a26e4:	17c8      	asrhi	r0, r1, #31
 80a26e6:	bf38      	it	cc
 80a26e8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a26ec:	bf18      	it	ne
 80a26ee:	f040 0001 	orrne.w	r0, r0, #1
 80a26f2:	4770      	bx	lr
 80a26f4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a26f8:	d102      	bne.n	80a2700 <__cmpsf2+0x4c>
 80a26fa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a26fe:	d105      	bne.n	80a270c <__cmpsf2+0x58>
 80a2700:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a2704:	d1e4      	bne.n	80a26d0 <__cmpsf2+0x1c>
 80a2706:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a270a:	d0e1      	beq.n	80a26d0 <__cmpsf2+0x1c>
 80a270c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2710:	4770      	bx	lr
 80a2712:	bf00      	nop

080a2714 <__aeabi_cfrcmple>:
 80a2714:	4684      	mov	ip, r0
 80a2716:	4608      	mov	r0, r1
 80a2718:	4661      	mov	r1, ip
 80a271a:	e7ff      	b.n	80a271c <__aeabi_cfcmpeq>

080a271c <__aeabi_cfcmpeq>:
 80a271c:	b50f      	push	{r0, r1, r2, r3, lr}
 80a271e:	f7ff ffc9 	bl	80a26b4 <__cmpsf2>
 80a2722:	2800      	cmp	r0, #0
 80a2724:	bf48      	it	mi
 80a2726:	f110 0f00 	cmnmi.w	r0, #0
 80a272a:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a272c <__aeabi_fcmpeq>:
 80a272c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2730:	f7ff fff4 	bl	80a271c <__aeabi_cfcmpeq>
 80a2734:	bf0c      	ite	eq
 80a2736:	2001      	moveq	r0, #1
 80a2738:	2000      	movne	r0, #0
 80a273a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a273e:	bf00      	nop

080a2740 <__aeabi_fcmplt>:
 80a2740:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2744:	f7ff ffea 	bl	80a271c <__aeabi_cfcmpeq>
 80a2748:	bf34      	ite	cc
 80a274a:	2001      	movcc	r0, #1
 80a274c:	2000      	movcs	r0, #0
 80a274e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2752:	bf00      	nop

080a2754 <__aeabi_fcmple>:
 80a2754:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2758:	f7ff ffe0 	bl	80a271c <__aeabi_cfcmpeq>
 80a275c:	bf94      	ite	ls
 80a275e:	2001      	movls	r0, #1
 80a2760:	2000      	movhi	r0, #0
 80a2762:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2766:	bf00      	nop

080a2768 <__aeabi_fcmpge>:
 80a2768:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a276c:	f7ff ffd2 	bl	80a2714 <__aeabi_cfrcmple>
 80a2770:	bf94      	ite	ls
 80a2772:	2001      	movls	r0, #1
 80a2774:	2000      	movhi	r0, #0
 80a2776:	f85d fb08 	ldr.w	pc, [sp], #8
 80a277a:	bf00      	nop

080a277c <__aeabi_fcmpgt>:
 80a277c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2780:	f7ff ffc8 	bl	80a2714 <__aeabi_cfrcmple>
 80a2784:	bf34      	ite	cc
 80a2786:	2001      	movcc	r0, #1
 80a2788:	2000      	movcs	r0, #0
 80a278a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a278e:	bf00      	nop

080a2790 <__aeabi_f2iz>:
 80a2790:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a2794:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a2798:	d30f      	bcc.n	80a27ba <__aeabi_f2iz+0x2a>
 80a279a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a279e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a27a2:	d90d      	bls.n	80a27c0 <__aeabi_f2iz+0x30>
 80a27a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a27a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a27ac:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a27b0:	fa23 f002 	lsr.w	r0, r3, r2
 80a27b4:	bf18      	it	ne
 80a27b6:	4240      	negne	r0, r0
 80a27b8:	4770      	bx	lr
 80a27ba:	f04f 0000 	mov.w	r0, #0
 80a27be:	4770      	bx	lr
 80a27c0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a27c4:	d101      	bne.n	80a27ca <__aeabi_f2iz+0x3a>
 80a27c6:	0242      	lsls	r2, r0, #9
 80a27c8:	d105      	bne.n	80a27d6 <__aeabi_f2iz+0x46>
 80a27ca:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a27ce:	bf08      	it	eq
 80a27d0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a27d4:	4770      	bx	lr
 80a27d6:	f04f 0000 	mov.w	r0, #0
 80a27da:	4770      	bx	lr

080a27dc <__cxa_atexit>:
 80a27dc:	b510      	push	{r4, lr}
 80a27de:	4c05      	ldr	r4, [pc, #20]	; (80a27f4 <__cxa_atexit+0x18>)
 80a27e0:	4613      	mov	r3, r2
 80a27e2:	b12c      	cbz	r4, 80a27f0 <__cxa_atexit+0x14>
 80a27e4:	460a      	mov	r2, r1
 80a27e6:	4601      	mov	r1, r0
 80a27e8:	2002      	movs	r0, #2
 80a27ea:	f3af 8000 	nop.w
 80a27ee:	bd10      	pop	{r4, pc}
 80a27f0:	4620      	mov	r0, r4
 80a27f2:	bd10      	pop	{r4, pc}
 80a27f4:	00000000 	.word	0x00000000

080a27f8 <memcpy>:
 80a27f8:	b510      	push	{r4, lr}
 80a27fa:	1e43      	subs	r3, r0, #1
 80a27fc:	440a      	add	r2, r1
 80a27fe:	4291      	cmp	r1, r2
 80a2800:	d004      	beq.n	80a280c <memcpy+0x14>
 80a2802:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2806:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a280a:	e7f8      	b.n	80a27fe <memcpy+0x6>
 80a280c:	bd10      	pop	{r4, pc}

080a280e <memset>:
 80a280e:	4603      	mov	r3, r0
 80a2810:	4402      	add	r2, r0
 80a2812:	4293      	cmp	r3, r2
 80a2814:	d002      	beq.n	80a281c <memset+0xe>
 80a2816:	f803 1b01 	strb.w	r1, [r3], #1
 80a281a:	e7fa      	b.n	80a2812 <memset+0x4>
 80a281c:	4770      	bx	lr
	...

080a2820 <srand>:
 80a2820:	b538      	push	{r3, r4, r5, lr}
 80a2822:	4b12      	ldr	r3, [pc, #72]	; (80a286c <srand+0x4c>)
 80a2824:	4605      	mov	r5, r0
 80a2826:	681c      	ldr	r4, [r3, #0]
 80a2828:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a282a:	b9d3      	cbnz	r3, 80a2862 <srand+0x42>
 80a282c:	2018      	movs	r0, #24
 80a282e:	f7fd ff9f 	bl	80a0770 <malloc>
 80a2832:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2836:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2838:	8003      	strh	r3, [r0, #0]
 80a283a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a283e:	8043      	strh	r3, [r0, #2]
 80a2840:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2844:	8083      	strh	r3, [r0, #4]
 80a2846:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a284a:	80c3      	strh	r3, [r0, #6]
 80a284c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2850:	8103      	strh	r3, [r0, #8]
 80a2852:	2305      	movs	r3, #5
 80a2854:	8143      	strh	r3, [r0, #10]
 80a2856:	230b      	movs	r3, #11
 80a2858:	8183      	strh	r3, [r0, #12]
 80a285a:	2201      	movs	r2, #1
 80a285c:	2300      	movs	r3, #0
 80a285e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2862:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2864:	2200      	movs	r2, #0
 80a2866:	611d      	str	r5, [r3, #16]
 80a2868:	615a      	str	r2, [r3, #20]
 80a286a:	bd38      	pop	{r3, r4, r5, pc}
 80a286c:	20000080 	.word	0x20000080

080a2870 <strdup>:
 80a2870:	4b02      	ldr	r3, [pc, #8]	; (80a287c <strdup+0xc>)
 80a2872:	4601      	mov	r1, r0
 80a2874:	6818      	ldr	r0, [r3, #0]
 80a2876:	f000 b803 	b.w	80a2880 <_strdup_r>
 80a287a:	bf00      	nop
 80a287c:	20000080 	.word	0x20000080

080a2880 <_strdup_r>:
 80a2880:	b570      	push	{r4, r5, r6, lr}
 80a2882:	4606      	mov	r6, r0
 80a2884:	4608      	mov	r0, r1
 80a2886:	460c      	mov	r4, r1
 80a2888:	f000 f80d 	bl	80a28a6 <strlen>
 80a288c:	1c45      	adds	r5, r0, #1
 80a288e:	4629      	mov	r1, r5
 80a2890:	4630      	mov	r0, r6
 80a2892:	f7fd ff95 	bl	80a07c0 <_malloc_r>
 80a2896:	4606      	mov	r6, r0
 80a2898:	b118      	cbz	r0, 80a28a2 <_strdup_r+0x22>
 80a289a:	462a      	mov	r2, r5
 80a289c:	4621      	mov	r1, r4
 80a289e:	f7ff ffab 	bl	80a27f8 <memcpy>
 80a28a2:	4630      	mov	r0, r6
 80a28a4:	bd70      	pop	{r4, r5, r6, pc}

080a28a6 <strlen>:
 80a28a6:	4603      	mov	r3, r0
 80a28a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a28ac:	2a00      	cmp	r2, #0
 80a28ae:	d1fb      	bne.n	80a28a8 <strlen+0x2>
 80a28b0:	1a18      	subs	r0, r3, r0
 80a28b2:	3801      	subs	r0, #1
 80a28b4:	4770      	bx	lr

080a28b6 <link_code_end>:
	...

080a28b8 <dynalib_user>:
 80a28b8:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a28c8:	0000 0000 2e25 6632 7000 6e69 0067 7973     ....%.2f.ping.sy
 80a28d8:	746e 6968 676e 5f73 6e69 7570 5f74 6e61     nthings_input_an
 80a28e8:	6c61 676f 305f 7300 6e79 6874 6e69 7367     alog_0.synthings
 80a28f8:	695f 706e 7475 615f 616e 6f6c 5f67 0031     _input_analog_1.
 80a2908:	7973 746e 6968 676e 5f73 6e69 7570 5f74     synthings_input_
 80a2918:	6e61 6c61 676f 325f 7300 6e79 6874 6e69     analog_2.synthin
 80a2928:	7367 695f 706e 7475 615f 616e 6f6c 5f67     gs_input_analog_
 80a2938:	0033 7973 746e 6968 676e 5f73 6e69 7570     3.synthings_inpu
 80a2948:	5f74 6e61 6c61 676f 345f 7300 6e79 6874     t_analog_4.synth
 80a2958:	6e69 7367 695f 706e 7475 615f 616e 6f6c     ings_input_analo
 80a2968:	5f67 0035 7973 746e 6968 676e 5f73 6e69     g_5.synthings_in
 80a2978:	7570 5f74 6964 6967 6174 5f6c 0030 7973     put_digital_0.sy
 80a2988:	746e 6968 676e 5f73 6e69 7570 5f74 6964     nthings_input_di
 80a2998:	6967 6174 5f6c 0031 7973 746e 6968 676e     gital_1.synthing
 80a29a8:	5f73 6e69 7570 5f74 6964 6967 6174 5f6c     s_input_digital_
 80a29b8:	0032 7973 746e 6968 676e 5f73 6e69 7570     2.synthings_inpu
 80a29c8:	5f74 6964 6967 6174 5f6c 0033 7973 746e     t_digital_3.synt
 80a29d8:	6968 676e 5f73 6e69 7570 5f74 6964 6967     hings_input_digi
 80a29e8:	6174 5f6c 0034 7973 746e 6968 676e 5f73     tal_4.synthings_
 80a29f8:	6e69 7570 5f74 6964 6967 6174 5f6c 0035     input_digital_5.
 80a2a08:	664f 0066 6e4f 0000                         Off.On..

080a2a10 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a2a18:	0867 080a 086d 080a 08c3 080a 087b 080a     g...m.......{...
 80a2a28:	0869 080a                                   i...

080a2a2c <_ZTV7TwoWire>:
	...
 80a2a34:	0e2d 080a 0e77 080a 0e4f 080a 0e2f 080a     -...w...O.../...
 80a2a44:	0e57 080a 0e5f 080a 0e67 080a 0e6f 080a     W..._...g...o...

080a2a54 <_ZTV9IPAddress>:
	...
 80a2a5c:	0ec1 080a 0eb1 080a 0eb3 080a 6162 6475     ............baud
 80a2a6c:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a2a7c:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a2a8c:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a2a9c:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a2aac:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a2abc:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a2acc:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a2adc:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a2aec:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a2afc:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a2b0c:	3d20 0020 0a0d 6c00 006e 6e66 6300 646f      = ....ln.fn.cod
 80a2b1c:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
 80a2b2c:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 80a2b3c:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

080a2b4c <_ZTVN5spark12NetworkClassE>:
	...
 80a2b54:	0f89 080a 0f93 080a 0f9d 080a 0fa7 080a     ................
 80a2b64:	0fb1 080a 0fbd 080a 0fc9 080a 0fd5 080a     ................
 80a2b74:	0fdd 080a 0fe7 080a 0ff1 080a               ............

080a2b80 <_ZTV8SPIClass>:
	...
 80a2b88:	1129 080a 112b 080a 005a 2b25 3330 3a64     )...+...Z.%+03d:
 80a2b98:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a2ba8:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a2bb8:	0000 0000                                   ....

080a2bbc <_ZTV11USARTSerial>:
	...
 80a2bc4:	1299 080a 12e9 080a 12f7 080a 1055 080a     ............U...
 80a2bd4:	12ad 080a 12cf 080a 12bb 080a 12e3 080a     ................
 80a2be4:	129b 080a 129f 080a                         ........

080a2bec <_ZTV9USBSerial>:
	...
 80a2bf4:	13d5 080a 1425 080a 1433 080a 1055 080a     ....%...3...U...
 80a2c04:	1411 080a 13d7 080a 13ed 080a 141f 080a     ................
 80a2c14:	1403 080a 13d1 080a                         ........

080a2c1c <_ZTVN5spark9WiFiClassE>:
	...
 80a2c24:	15d7 080a 15cd 080a 15c3 080a 1535 080a     ............5...
 80a2c34:	15b7 080a 15ab 080a 159f 080a 1597 080a     ................
 80a2c44:	158d 080a 1583 080a 153f 080a               ........?...

080a2c50 <__sf_fake_stdin>:
	...

080a2c70 <__sf_fake_stdout>:
	...

080a2c90 <__sf_fake_stderr>:
	...
 80a2cb0:	0043                                        C.

080a2cb2 <link_const_variable_data_end>:
	...

080a2cb4 <link_constructors_location>:
 80a2cb4:	080a02e5 	.word	0x080a02e5
 80a2cb8:	080a0f79 	.word	0x080a0f79
 80a2cbc:	080a1041 	.word	0x080a1041
 80a2cc0:	080a110d 	.word	0x080a110d
 80a2cc4:	080a126d 	.word	0x080a126d
 80a2cc8:	080a1285 	.word	0x080a1285
 80a2ccc:	080a15e1 	.word	0x080a15e1
 80a2cd0:	080a182d 	.word	0x080a182d
 80a2cd4:	080a185d 	.word	0x080a185d
 80a2cd8:	080a18b5 	.word	0x080a18b5
 80a2cdc:	080a1979 	.word	0x080a1979
 80a2ce0:	080a19fd 	.word	0x080a19fd
 80a2ce4:	080a1a81 	.word	0x080a1a81

080a2ce8 <link_constructors_end>:
	...
